/*
 * API системы \"Народный контроль\"
 *  <h2>Приложение Народный контроль</h2> <p><strong>Основная цель</strong>: контроль за состоянием сфер жизнедеятельности города по отраслям:</p> <ul> <li>общественный транспорт (мин.транс)</li> <li>состояние дорог и прилегающий территорий (мин.транс)</li> <li>состояние благоустройства города (мин. хоз)</li> <li>аварийные участки города, прорывы водо- тепло- коммуникаций, обрывы электро коммуникаций  (жэк)</li> <li>постройки в аварийном состоянии (мин. Хоз)</li> <li>уборка территории и вывоз отходов (мин. Хоз)</li> <li>некачественные товары (потреб контроль)</li> <li>скопление животных (мин. Хоз)</li> <li>последствия стихийных бедствий  (мин. Хоз,  мчс)</li> <li>последствие военных действий (мчс, военные, мин. Транс)</li> <li>проявления вандализмам (в т.ч. размещение рекламы в неположенном месте)</li> <li>состояние фортификационных сооружений (мчс)</li> <li>состояние рабочего места (проф. Комиссии)</li> <li>регулярное скопление криминальных (или асоциальных) элементов общества или проявление аморального поведения в общественных местах (мин. Хоз)</li> <li>нарушение ПДД участниками дорожного движения (мвд)</li> <li>также могут быть заявки без категории</li> <li>инициативы граждан - полезные нововведения от граждан</li> <li>заявки на утерянные или найденные вещи</li> </ul> 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: exxxar@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Contractor;
import org.openapitools.client.model.ContractorForm;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineObject3;
import org.openapitools.client.model.InlineObject4;
import org.openapitools.client.model.InlineObject6;
import org.openapitools.client.model.InlineObject7;
import org.openapitools.client.model.InlineObject8;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.MediaContent;
import org.openapitools.client.model.PaginateObject;
import org.openapitools.client.model.ProblemCategory;
import org.openapitools.client.model.ProblemCategoryForm;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.ProfileForm;
import org.openapitools.client.model.Request;
import org.openapitools.client.model.StoredRequest;
import org.openapitools.client.model.StoredRequestForm;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserForm;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for contractorsContractorIdDelete
     * @param contractorId Parameter description in CommonMark or HTML. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsContractorIdDeleteCall(Long contractorId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contractors/{contractorId}"
            .replaceAll("\\{" + "contractorId" + "\\}", localVarApiClient.escapeString(contractorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractorsContractorIdDeleteValidateBeforeCall(Long contractorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contractorId' is set
        if (contractorId == null) {
            throw new ApiException("Missing the required parameter 'contractorId' when calling contractorsContractorIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = contractorsContractorIdDeleteCall(contractorId, _callback);
        return localVarCall;

    }

    /**
     * Удаляем исполнителя по идентификатору
     * 
     * @param contractorId Parameter description in CommonMark or HTML. (required)
     * @return Contractor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Contractor contractorsContractorIdDelete(Long contractorId) throws ApiException {
        ApiResponse<Contractor> localVarResp = contractorsContractorIdDeleteWithHttpInfo(contractorId);
        return localVarResp.getData();
    }

    /**
     * Удаляем исполнителя по идентификатору
     * 
     * @param contractorId Parameter description in CommonMark or HTML. (required)
     * @return ApiResponse&lt;Contractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contractor> contractorsContractorIdDeleteWithHttpInfo(Long contractorId) throws ApiException {
        okhttp3.Call localVarCall = contractorsContractorIdDeleteValidateBeforeCall(contractorId, null);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Удаляем исполнителя по идентификатору (asynchronously)
     * 
     * @param contractorId Parameter description in CommonMark or HTML. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsContractorIdDeleteAsync(Long contractorId, final ApiCallback<Contractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractorsContractorIdDeleteValidateBeforeCall(contractorId, _callback);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractorsContractorIdGet
     * @param contractorId Целочисленный идентификатор (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsContractorIdGetCall(Long contractorId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contractors/{contractorId}"
            .replaceAll("\\{" + "contractorId" + "\\}", localVarApiClient.escapeString(contractorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractorsContractorIdGetValidateBeforeCall(Long contractorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contractorId' is set
        if (contractorId == null) {
            throw new ApiException("Missing the required parameter 'contractorId' when calling contractorsContractorIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractorsContractorIdGetCall(contractorId, _callback);
        return localVarCall;

    }

    /**
     * Находим исполнителя по идентификатору
     * 
     * @param contractorId Целочисленный идентификатор (required)
     * @return Contractor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Contractor contractorsContractorIdGet(Long contractorId) throws ApiException {
        ApiResponse<Contractor> localVarResp = contractorsContractorIdGetWithHttpInfo(contractorId);
        return localVarResp.getData();
    }

    /**
     * Находим исполнителя по идентификатору
     * 
     * @param contractorId Целочисленный идентификатор (required)
     * @return ApiResponse&lt;Contractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contractor> contractorsContractorIdGetWithHttpInfo(Long contractorId) throws ApiException {
        okhttp3.Call localVarCall = contractorsContractorIdGetValidateBeforeCall(contractorId, null);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Находим исполнителя по идентификатору (asynchronously)
     * 
     * @param contractorId Целочисленный идентификатор (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsContractorIdGetAsync(Long contractorId, final ApiCallback<Contractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractorsContractorIdGetValidateBeforeCall(contractorId, _callback);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractorsContractorIdPut
     * @param contractorId Целочисленный идентификатор исполнителя (required)
     * @param contractorForm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор исполнителя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsContractorIdPutCall(Long contractorId, ContractorForm contractorForm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = contractorForm;

        // create path and map variables
        String localVarPath = "/contractors/{contractorId}"
            .replaceAll("\\{" + "contractorId" + "\\}", localVarApiClient.escapeString(contractorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractorsContractorIdPutValidateBeforeCall(Long contractorId, ContractorForm contractorForm, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contractorId' is set
        if (contractorId == null) {
            throw new ApiException("Missing the required parameter 'contractorId' when calling contractorsContractorIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = contractorsContractorIdPutCall(contractorId, contractorForm, _callback);
        return localVarCall;

    }

    /**
     * Обновляем исполнителя по идентификатору
     * 
     * @param contractorId Целочисленный идентификатор исполнителя (required)
     * @param contractorForm  (optional)
     * @return Contractor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор исполнителя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Contractor contractorsContractorIdPut(Long contractorId, ContractorForm contractorForm) throws ApiException {
        ApiResponse<Contractor> localVarResp = contractorsContractorIdPutWithHttpInfo(contractorId, contractorForm);
        return localVarResp.getData();
    }

    /**
     * Обновляем исполнителя по идентификатору
     * 
     * @param contractorId Целочисленный идентификатор исполнителя (required)
     * @param contractorForm  (optional)
     * @return ApiResponse&lt;Contractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор исполнителя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contractor> contractorsContractorIdPutWithHttpInfo(Long contractorId, ContractorForm contractorForm) throws ApiException {
        okhttp3.Call localVarCall = contractorsContractorIdPutValidateBeforeCall(contractorId, contractorForm, null);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновляем исполнителя по идентификатору (asynchronously)
     * 
     * @param contractorId Целочисленный идентификатор исполнителя (required)
     * @param contractorForm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор исполнителя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsContractorIdPutAsync(Long contractorId, ContractorForm contractorForm, final ApiCallback<Contractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractorsContractorIdPutValidateBeforeCall(contractorId, contractorForm, _callback);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractorsContractorIdRequestsActiveGet
     * @param contractorId Целочисленный идентификатор (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsContractorIdRequestsActiveGetCall(Long contractorId, Long page, Long size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contractors/{contractorId}/requests/active"
            .replaceAll("\\{" + "contractorId" + "\\}", localVarApiClient.escapeString(contractorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractorsContractorIdRequestsActiveGetValidateBeforeCall(Long contractorId, Long page, Long size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contractorId' is set
        if (contractorId == null) {
            throw new ApiException("Missing the required parameter 'contractorId' when calling contractorsContractorIdRequestsActiveGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractorsContractorIdRequestsActiveGetCall(contractorId, page, size, _callback);
        return localVarCall;

    }

    /**
     * Список активных заявок по исполнительному органу
     * 
     * @param contractorId Целочисленный идентификатор (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return PaginateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginateObject contractorsContractorIdRequestsActiveGet(Long contractorId, Long page, Long size) throws ApiException {
        ApiResponse<PaginateObject> localVarResp = contractorsContractorIdRequestsActiveGetWithHttpInfo(contractorId, page, size);
        return localVarResp.getData();
    }

    /**
     * Список активных заявок по исполнительному органу
     * 
     * @param contractorId Целочисленный идентификатор (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return ApiResponse&lt;PaginateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginateObject> contractorsContractorIdRequestsActiveGetWithHttpInfo(Long contractorId, Long page, Long size) throws ApiException {
        okhttp3.Call localVarCall = contractorsContractorIdRequestsActiveGetValidateBeforeCall(contractorId, page, size, null);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список активных заявок по исполнительному органу (asynchronously)
     * 
     * @param contractorId Целочисленный идентификатор (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsContractorIdRequestsActiveGetAsync(Long contractorId, Long page, Long size, final ApiCallback<PaginateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractorsContractorIdRequestsActiveGetValidateBeforeCall(contractorId, page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractorsContractorIdRequestsArchiveGet
     * @param contractorId Целочисленный идентификатор (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsContractorIdRequestsArchiveGetCall(Long contractorId, Long page, Long size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contractors/{contractorId}/requests/archive"
            .replaceAll("\\{" + "contractorId" + "\\}", localVarApiClient.escapeString(contractorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractorsContractorIdRequestsArchiveGetValidateBeforeCall(Long contractorId, Long page, Long size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contractorId' is set
        if (contractorId == null) {
            throw new ApiException("Missing the required parameter 'contractorId' when calling contractorsContractorIdRequestsArchiveGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractorsContractorIdRequestsArchiveGetCall(contractorId, page, size, _callback);
        return localVarCall;

    }

    /**
     * Список архивных заявок по исполнительному органу
     * 
     * @param contractorId Целочисленный идентификатор (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return PaginateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginateObject contractorsContractorIdRequestsArchiveGet(Long contractorId, Long page, Long size) throws ApiException {
        ApiResponse<PaginateObject> localVarResp = contractorsContractorIdRequestsArchiveGetWithHttpInfo(contractorId, page, size);
        return localVarResp.getData();
    }

    /**
     * Список архивных заявок по исполнительному органу
     * 
     * @param contractorId Целочисленный идентификатор (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return ApiResponse&lt;PaginateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginateObject> contractorsContractorIdRequestsArchiveGetWithHttpInfo(Long contractorId, Long page, Long size) throws ApiException {
        okhttp3.Call localVarCall = contractorsContractorIdRequestsArchiveGetValidateBeforeCall(contractorId, page, size, null);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список архивных заявок по исполнительному органу (asynchronously)
     * 
     * @param contractorId Целочисленный идентификатор (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsContractorIdRequestsArchiveGetAsync(Long contractorId, Long page, Long size, final ApiCallback<PaginateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractorsContractorIdRequestsArchiveGetValidateBeforeCall(contractorId, page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractorsGet
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsGetCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contractors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractorsGetValidateBeforeCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = contractorsGetCall(page, size, _callback);
        return localVarCall;

    }

    /**
     * Список профилей исполнительных органов
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return PaginateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginateObject contractorsGet(Long page, Long size) throws ApiException {
        ApiResponse<PaginateObject> localVarResp = contractorsGetWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * Список профилей исполнительных органов
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return ApiResponse&lt;PaginateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginateObject> contractorsGetWithHttpInfo(Long page, Long size) throws ApiException {
        okhttp3.Call localVarCall = contractorsGetValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список профилей исполнительных органов (asynchronously)
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsGetAsync(Long page, Long size, final ApiCallback<PaginateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractorsGetValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractorsPost
     * @param contractorForm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsPostCall(ContractorForm contractorForm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = contractorForm;

        // create path and map variables
        String localVarPath = "/contractors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractorsPostValidateBeforeCall(ContractorForm contractorForm, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = contractorsPostCall(contractorForm, _callback);
        return localVarCall;

    }

    /**
     * Создаем профиль исполнительного органа
     * 
     * @param contractorForm  (optional)
     * @return Contractor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Contractor contractorsPost(ContractorForm contractorForm) throws ApiException {
        ApiResponse<Contractor> localVarResp = contractorsPostWithHttpInfo(contractorForm);
        return localVarResp.getData();
    }

    /**
     * Создаем профиль исполнительного органа
     * 
     * @param contractorForm  (optional)
     * @return ApiResponse&lt;Contractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contractor> contractorsPostWithHttpInfo(ContractorForm contractorForm) throws ApiException {
        okhttp3.Call localVarCall = contractorsPostValidateBeforeCall(contractorForm, null);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создаем профиль исполнительного органа (asynchronously)
     * 
     * @param contractorForm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractorsPostAsync(ContractorForm contractorForm, final ApiCallback<Contractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractorsPostValidateBeforeCall(contractorForm, _callback);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for problemCategoriesGet
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesGetCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/problem-categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call problemCategoriesGetValidateBeforeCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = problemCategoriesGetCall(page, size, _callback);
        return localVarCall;

    }

    /**
     * Список категорий проблем
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return PaginateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginateObject problemCategoriesGet(Long page, Long size) throws ApiException {
        ApiResponse<PaginateObject> localVarResp = problemCategoriesGetWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * Список категорий проблем
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return ApiResponse&lt;PaginateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginateObject> problemCategoriesGetWithHttpInfo(Long page, Long size) throws ApiException {
        okhttp3.Call localVarCall = problemCategoriesGetValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список категорий проблем (asynchronously)
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesGetAsync(Long page, Long size, final ApiCallback<PaginateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = problemCategoriesGetValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for problemCategoriesPost
     * @param problemCategoryForm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesPostCall(ProblemCategoryForm problemCategoryForm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = problemCategoryForm;

        // create path and map variables
        String localVarPath = "/problem-categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call problemCategoriesPostValidateBeforeCall(ProblemCategoryForm problemCategoryForm, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = problemCategoriesPostCall(problemCategoryForm, _callback);
        return localVarCall;

    }

    /**
     * Создаем новую категорию проблем
     * 
     * @param problemCategoryForm  (optional)
     * @return ProblemCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ProblemCategory problemCategoriesPost(ProblemCategoryForm problemCategoryForm) throws ApiException {
        ApiResponse<ProblemCategory> localVarResp = problemCategoriesPostWithHttpInfo(problemCategoryForm);
        return localVarResp.getData();
    }

    /**
     * Создаем новую категорию проблем
     * 
     * @param problemCategoryForm  (optional)
     * @return ApiResponse&lt;ProblemCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProblemCategory> problemCategoriesPostWithHttpInfo(ProblemCategoryForm problemCategoryForm) throws ApiException {
        okhttp3.Call localVarCall = problemCategoriesPostValidateBeforeCall(problemCategoryForm, null);
        Type localVarReturnType = new TypeToken<ProblemCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создаем новую категорию проблем (asynchronously)
     * 
     * @param problemCategoryForm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesPostAsync(ProblemCategoryForm problemCategoryForm, final ApiCallback<ProblemCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = problemCategoriesPostValidateBeforeCall(problemCategoryForm, _callback);
        Type localVarReturnType = new TypeToken<ProblemCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for problemCategoriesProblemCategoryIdActiveRequestsGet
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesProblemCategoryIdActiveRequestsGetCall(Long problemCategoryId, Long page, Long size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/problem-categories/{problemCategoryId}/active-requests"
            .replaceAll("\\{" + "problemCategoryId" + "\\}", localVarApiClient.escapeString(problemCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call problemCategoriesProblemCategoryIdActiveRequestsGetValidateBeforeCall(Long problemCategoryId, Long page, Long size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'problemCategoryId' is set
        if (problemCategoryId == null) {
            throw new ApiException("Missing the required parameter 'problemCategoryId' when calling problemCategoriesProblemCategoryIdActiveRequestsGet(Async)");
        }
        

        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdActiveRequestsGetCall(problemCategoryId, page, size, _callback);
        return localVarCall;

    }

    /**
     * Список активных запросов в категории
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return PaginateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginateObject problemCategoriesProblemCategoryIdActiveRequestsGet(Long problemCategoryId, Long page, Long size) throws ApiException {
        ApiResponse<PaginateObject> localVarResp = problemCategoriesProblemCategoryIdActiveRequestsGetWithHttpInfo(problemCategoryId, page, size);
        return localVarResp.getData();
    }

    /**
     * Список активных запросов в категории
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return ApiResponse&lt;PaginateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginateObject> problemCategoriesProblemCategoryIdActiveRequestsGetWithHttpInfo(Long problemCategoryId, Long page, Long size) throws ApiException {
        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdActiveRequestsGetValidateBeforeCall(problemCategoryId, page, size, null);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список активных запросов в категории (asynchronously)
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesProblemCategoryIdActiveRequestsGetAsync(Long problemCategoryId, Long page, Long size, final ApiCallback<PaginateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdActiveRequestsGetValidateBeforeCall(problemCategoryId, page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for problemCategoriesProblemCategoryIdArchiveRequestsGet
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesProblemCategoryIdArchiveRequestsGetCall(Long problemCategoryId, Long page, Long size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/problem-categories/{problemCategoryId}/archive-requests"
            .replaceAll("\\{" + "problemCategoryId" + "\\}", localVarApiClient.escapeString(problemCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call problemCategoriesProblemCategoryIdArchiveRequestsGetValidateBeforeCall(Long problemCategoryId, Long page, Long size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'problemCategoryId' is set
        if (problemCategoryId == null) {
            throw new ApiException("Missing the required parameter 'problemCategoryId' when calling problemCategoriesProblemCategoryIdArchiveRequestsGet(Async)");
        }
        

        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdArchiveRequestsGetCall(problemCategoryId, page, size, _callback);
        return localVarCall;

    }

    /**
     * Список архивных запросов в категории
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return PaginateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginateObject problemCategoriesProblemCategoryIdArchiveRequestsGet(Long problemCategoryId, Long page, Long size) throws ApiException {
        ApiResponse<PaginateObject> localVarResp = problemCategoriesProblemCategoryIdArchiveRequestsGetWithHttpInfo(problemCategoryId, page, size);
        return localVarResp.getData();
    }

    /**
     * Список архивных запросов в категории
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return ApiResponse&lt;PaginateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginateObject> problemCategoriesProblemCategoryIdArchiveRequestsGetWithHttpInfo(Long problemCategoryId, Long page, Long size) throws ApiException {
        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdArchiveRequestsGetValidateBeforeCall(problemCategoryId, page, size, null);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список архивных запросов в категории (asynchronously)
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesProblemCategoryIdArchiveRequestsGetAsync(Long problemCategoryId, Long page, Long size, final ApiCallback<PaginateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdArchiveRequestsGetValidateBeforeCall(problemCategoryId, page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for problemCategoriesProblemCategoryIdCompletedRequestsGet
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesProblemCategoryIdCompletedRequestsGetCall(Long problemCategoryId, Long page, Long size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/problem-categories/{problemCategoryId}/completed-requests"
            .replaceAll("\\{" + "problemCategoryId" + "\\}", localVarApiClient.escapeString(problemCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call problemCategoriesProblemCategoryIdCompletedRequestsGetValidateBeforeCall(Long problemCategoryId, Long page, Long size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'problemCategoryId' is set
        if (problemCategoryId == null) {
            throw new ApiException("Missing the required parameter 'problemCategoryId' when calling problemCategoriesProblemCategoryIdCompletedRequestsGet(Async)");
        }
        

        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdCompletedRequestsGetCall(problemCategoryId, page, size, _callback);
        return localVarCall;

    }

    /**
     * Список выполненных запросов в категории
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return PaginateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginateObject problemCategoriesProblemCategoryIdCompletedRequestsGet(Long problemCategoryId, Long page, Long size) throws ApiException {
        ApiResponse<PaginateObject> localVarResp = problemCategoriesProblemCategoryIdCompletedRequestsGetWithHttpInfo(problemCategoryId, page, size);
        return localVarResp.getData();
    }

    /**
     * Список выполненных запросов в категории
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return ApiResponse&lt;PaginateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginateObject> problemCategoriesProblemCategoryIdCompletedRequestsGetWithHttpInfo(Long problemCategoryId, Long page, Long size) throws ApiException {
        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdCompletedRequestsGetValidateBeforeCall(problemCategoryId, page, size, null);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список выполненных запросов в категории (asynchronously)
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesProblemCategoryIdCompletedRequestsGetAsync(Long problemCategoryId, Long page, Long size, final ApiCallback<PaginateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdCompletedRequestsGetValidateBeforeCall(problemCategoryId, page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for problemCategoriesProblemCategoryIdDelete
     * @param problemCategoryId Parameter description in CommonMark or HTML. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesProblemCategoryIdDeleteCall(Long problemCategoryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/problem-categories/{problemCategoryId}"
            .replaceAll("\\{" + "problemCategoryId" + "\\}", localVarApiClient.escapeString(problemCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call problemCategoriesProblemCategoryIdDeleteValidateBeforeCall(Long problemCategoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'problemCategoryId' is set
        if (problemCategoryId == null) {
            throw new ApiException("Missing the required parameter 'problemCategoryId' when calling problemCategoriesProblemCategoryIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdDeleteCall(problemCategoryId, _callback);
        return localVarCall;

    }

    /**
     * Удаляем категорию по идентификатору
     * 
     * @param problemCategoryId Parameter description in CommonMark or HTML. (required)
     * @return ProblemCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ProblemCategory problemCategoriesProblemCategoryIdDelete(Long problemCategoryId) throws ApiException {
        ApiResponse<ProblemCategory> localVarResp = problemCategoriesProblemCategoryIdDeleteWithHttpInfo(problemCategoryId);
        return localVarResp.getData();
    }

    /**
     * Удаляем категорию по идентификатору
     * 
     * @param problemCategoryId Parameter description in CommonMark or HTML. (required)
     * @return ApiResponse&lt;ProblemCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProblemCategory> problemCategoriesProblemCategoryIdDeleteWithHttpInfo(Long problemCategoryId) throws ApiException {
        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdDeleteValidateBeforeCall(problemCategoryId, null);
        Type localVarReturnType = new TypeToken<ProblemCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Удаляем категорию по идентификатору (asynchronously)
     * 
     * @param problemCategoryId Parameter description in CommonMark or HTML. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesProblemCategoryIdDeleteAsync(Long problemCategoryId, final ApiCallback<ProblemCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdDeleteValidateBeforeCall(problemCategoryId, _callback);
        Type localVarReturnType = new TypeToken<ProblemCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for problemCategoriesProblemCategoryIdGet
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesProblemCategoryIdGetCall(Long problemCategoryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/problem-categories/{problemCategoryId}"
            .replaceAll("\\{" + "problemCategoryId" + "\\}", localVarApiClient.escapeString(problemCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call problemCategoriesProblemCategoryIdGetValidateBeforeCall(Long problemCategoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'problemCategoryId' is set
        if (problemCategoryId == null) {
            throw new ApiException("Missing the required parameter 'problemCategoryId' when calling problemCategoriesProblemCategoryIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdGetCall(problemCategoryId, _callback);
        return localVarCall;

    }

    /**
     * Находим категорию по идентификатору
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public User problemCategoriesProblemCategoryIdGet(Long problemCategoryId) throws ApiException {
        ApiResponse<User> localVarResp = problemCategoriesProblemCategoryIdGetWithHttpInfo(problemCategoryId);
        return localVarResp.getData();
    }

    /**
     * Находим категорию по идентификатору
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> problemCategoriesProblemCategoryIdGetWithHttpInfo(Long problemCategoryId) throws ApiException {
        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdGetValidateBeforeCall(problemCategoryId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Находим категорию по идентификатору (asynchronously)
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesProblemCategoryIdGetAsync(Long problemCategoryId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdGetValidateBeforeCall(problemCategoryId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for problemCategoriesProblemCategoryIdPut
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param problemCategoryForm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesProblemCategoryIdPutCall(Long problemCategoryId, ProblemCategoryForm problemCategoryForm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = problemCategoryForm;

        // create path and map variables
        String localVarPath = "/problem-categories/{problemCategoryId}"
            .replaceAll("\\{" + "problemCategoryId" + "\\}", localVarApiClient.escapeString(problemCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call problemCategoriesProblemCategoryIdPutValidateBeforeCall(Long problemCategoryId, ProblemCategoryForm problemCategoryForm, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'problemCategoryId' is set
        if (problemCategoryId == null) {
            throw new ApiException("Missing the required parameter 'problemCategoryId' when calling problemCategoriesProblemCategoryIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdPutCall(problemCategoryId, problemCategoryForm, _callback);
        return localVarCall;

    }

    /**
     * Обновляем категорию по идентификатору
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param problemCategoryForm  (optional)
     * @return ProblemCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ProblemCategory problemCategoriesProblemCategoryIdPut(Long problemCategoryId, ProblemCategoryForm problemCategoryForm) throws ApiException {
        ApiResponse<ProblemCategory> localVarResp = problemCategoriesProblemCategoryIdPutWithHttpInfo(problemCategoryId, problemCategoryForm);
        return localVarResp.getData();
    }

    /**
     * Обновляем категорию по идентификатору
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param problemCategoryForm  (optional)
     * @return ApiResponse&lt;ProblemCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProblemCategory> problemCategoriesProblemCategoryIdPutWithHttpInfo(Long problemCategoryId, ProblemCategoryForm problemCategoryForm) throws ApiException {
        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdPutValidateBeforeCall(problemCategoryId, problemCategoryForm, null);
        Type localVarReturnType = new TypeToken<ProblemCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновляем категорию по идентификатору (asynchronously)
     * 
     * @param problemCategoryId Целочисленный идентификатор категории (required)
     * @param problemCategoryForm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call problemCategoriesProblemCategoryIdPutAsync(Long problemCategoryId, ProblemCategoryForm problemCategoryForm, final ApiCallback<ProblemCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = problemCategoriesProblemCategoryIdPutValidateBeforeCall(problemCategoryId, problemCategoryForm, _callback);
        Type localVarReturnType = new TypeToken<ProblemCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesGet
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGetCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesGetValidateBeforeCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = profilesGetCall(page, size, _callback);
        return localVarCall;

    }

    /**
     * Список профилей пользователя
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return PaginateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginateObject profilesGet(Long page, Long size) throws ApiException {
        ApiResponse<PaginateObject> localVarResp = profilesGetWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * Список профилей пользователя
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return ApiResponse&lt;PaginateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginateObject> profilesGetWithHttpInfo(Long page, Long size) throws ApiException {
        okhttp3.Call localVarCall = profilesGetValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список профилей пользователя (asynchronously)
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGetAsync(Long page, Long size, final ApiCallback<PaginateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesGetValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesPost
     * @param profileForm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesPostCall(ProfileForm profileForm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = profileForm;

        // create path and map variables
        String localVarPath = "/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesPostValidateBeforeCall(ProfileForm profileForm, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = profilesPostCall(profileForm, _callback);
        return localVarCall;

    }

    /**
     * Создаем профиль
     * 
     * @param profileForm  (optional)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Profile profilesPost(ProfileForm profileForm) throws ApiException {
        ApiResponse<Profile> localVarResp = profilesPostWithHttpInfo(profileForm);
        return localVarResp.getData();
    }

    /**
     * Создаем профиль
     * 
     * @param profileForm  (optional)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> profilesPostWithHttpInfo(ProfileForm profileForm) throws ApiException {
        okhttp3.Call localVarCall = profilesPostValidateBeforeCall(profileForm, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создаем профиль (asynchronously)
     * 
     * @param profileForm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesPostAsync(ProfileForm profileForm, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesPostValidateBeforeCall(profileForm, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdDelete
     * @param profileId Parameter description in CommonMark or HTML. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdDeleteCall(Long profileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}"
            .replaceAll("\\{" + "profileId" + "\\}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdDeleteValidateBeforeCall(Long profileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = profilesProfileIdDeleteCall(profileId, _callback);
        return localVarCall;

    }

    /**
     * Удаляем пользователя по идентификатору
     * 
     * @param profileId Parameter description in CommonMark or HTML. (required)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Profile profilesProfileIdDelete(Long profileId) throws ApiException {
        ApiResponse<Profile> localVarResp = profilesProfileIdDeleteWithHttpInfo(profileId);
        return localVarResp.getData();
    }

    /**
     * Удаляем пользователя по идентификатору
     * 
     * @param profileId Parameter description in CommonMark or HTML. (required)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> profilesProfileIdDeleteWithHttpInfo(Long profileId) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdDeleteValidateBeforeCall(profileId, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Удаляем пользователя по идентификатору (asynchronously)
     * 
     * @param profileId Parameter description in CommonMark or HTML. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdDeleteAsync(Long profileId, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdDeleteValidateBeforeCall(profileId, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdGet
     * @param profileId Целочисленный идентификатор профиля пользователя (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор профиля пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdGetCall(Long profileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}"
            .replaceAll("\\{" + "profileId" + "\\}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdGetValidateBeforeCall(Long profileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = profilesProfileIdGetCall(profileId, _callback);
        return localVarCall;

    }

    /**
     * Находим профиль пользователя по идентификатору
     * 
     * @param profileId Целочисленный идентификатор профиля пользователя (required)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор профиля пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Profile profilesProfileIdGet(Long profileId) throws ApiException {
        ApiResponse<Profile> localVarResp = profilesProfileIdGetWithHttpInfo(profileId);
        return localVarResp.getData();
    }

    /**
     * Находим профиль пользователя по идентификатору
     * 
     * @param profileId Целочисленный идентификатор профиля пользователя (required)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор профиля пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> profilesProfileIdGetWithHttpInfo(Long profileId) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdGetValidateBeforeCall(profileId, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Находим профиль пользователя по идентификатору (asynchronously)
     * 
     * @param profileId Целочисленный идентификатор профиля пользователя (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор профиля пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdGetAsync(Long profileId, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdGetValidateBeforeCall(profileId, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdPut
     * @param profileId Целочисленный идентификатор профиля пользователя (required)
     * @param profileForm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdPutCall(Long profileId, ProfileForm profileForm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = profileForm;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}"
            .replaceAll("\\{" + "profileId" + "\\}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdPutValidateBeforeCall(Long profileId, ProfileForm profileForm, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = profilesProfileIdPutCall(profileId, profileForm, _callback);
        return localVarCall;

    }

    /**
     * Обновляем профиль пользователя по идентификатору
     * 
     * @param profileId Целочисленный идентификатор профиля пользователя (required)
     * @param profileForm  (optional)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Profile profilesProfileIdPut(Long profileId, ProfileForm profileForm) throws ApiException {
        ApiResponse<Profile> localVarResp = profilesProfileIdPutWithHttpInfo(profileId, profileForm);
        return localVarResp.getData();
    }

    /**
     * Обновляем профиль пользователя по идентификатору
     * 
     * @param profileId Целочисленный идентификатор профиля пользователя (required)
     * @param profileForm  (optional)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> profilesProfileIdPutWithHttpInfo(Long profileId, ProfileForm profileForm) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdPutValidateBeforeCall(profileId, profileForm, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновляем профиль пользователя по идентификатору (asynchronously)
     * 
     * @param profileId Целочисленный идентификатор профиля пользователя (required)
     * @param profileForm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdPutAsync(Long profileId, ProfileForm profileForm, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdPutValidateBeforeCall(profileId, profileForm, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsGet
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsGetCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsGetValidateBeforeCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = requestsGetCall(page, size, _callback);
        return localVarCall;

    }

    /**
     * Список заявок
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return PaginateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginateObject requestsGet(Long page, Long size) throws ApiException {
        ApiResponse<PaginateObject> localVarResp = requestsGetWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * Список заявок
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return ApiResponse&lt;PaginateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginateObject> requestsGetWithHttpInfo(Long page, Long size) throws ApiException {
        okhttp3.Call localVarCall = requestsGetValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список заявок (asynchronously)
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsGetAsync(Long page, Long size, final ApiCallback<PaginateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsGetValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsInRangePost
     * @param inlineObject7  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsInRangePostCall(InlineObject7 inlineObject7, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject7;

        // create path and map variables
        String localVarPath = "/requests/in-range";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsInRangePostValidateBeforeCall(InlineObject7 inlineObject7, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = requestsInRangePostCall(inlineObject7, _callback);
        return localVarCall;

    }

    /**
     * Подбор заявок в радиусе
     * 
     * @param inlineObject7  (optional)
     * @return List&lt;Request&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<Request> requestsInRangePost(InlineObject7 inlineObject7) throws ApiException {
        ApiResponse<List<Request>> localVarResp = requestsInRangePostWithHttpInfo(inlineObject7);
        return localVarResp.getData();
    }

    /**
     * Подбор заявок в радиусе
     * 
     * @param inlineObject7  (optional)
     * @return ApiResponse&lt;List&lt;Request&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Request>> requestsInRangePostWithHttpInfo(InlineObject7 inlineObject7) throws ApiException {
        okhttp3.Call localVarCall = requestsInRangePostValidateBeforeCall(inlineObject7, null);
        Type localVarReturnType = new TypeToken<List<Request>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Подбор заявок в радиусе (asynchronously)
     * 
     * @param inlineObject7  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsInRangePostAsync(InlineObject7 inlineObject7, final ApiCallback<List<Request>> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsInRangePostValidateBeforeCall(inlineObject7, _callback);
        Type localVarReturnType = new TypeToken<List<Request>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsPost
     * @param description  (required)
     * @param problemCategories  (required)
     * @param latitude  (required)
     * @param longitude  (required)
     * @param parentRequestId идентификатор более ранней заявки по схожей проблеме (optional)
     * @param location  (optional, default to &quot;null&quot;)
     * @param baseRating фиксированный рейтинг заявки, указывается администратором для принудительного повышения (optional, default to 0)
     * @param status Тип заявки:  * &#x60;IN PROCESSING&#x60; - новая заявка  * &#x60;IN CONSIDERATION&#x60; - заявка на рассмотрении  * &#x60;IN EXECUTION&#x60; - заявка выполняется  * &#x60;IN EXECUTION CHECK&#x60; - проверка выполнения заявки  * &#x60;COMPLETED&#x60; - выполненная заявка  * &#x60;ARCHIVED&#x60; - заявка находится в архиве  (optional, default to StatusEnum.IN_PROCESSING)
     * @param attachments  (optional)
     * @param requestConsiderationAt дата начала рассмотрения заявки (optional)
     * @param beginRequestExecutionAt дата начала выполнения работ по заявке (optional)
     * @param completeRequestExecutionAt дата завершения выполнения работ по заявке (optional)
     * @param requestStatusCheckedAt дата финальной проверки выполнения (optional)
     * @param isModerated  (optional, default to true)
     * @param moderatorId  (optional)
     * @param filenames  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsPostCall(String description, List<Integer> problemCategories, BigDecimal latitude, BigDecimal longitude, Long parentRequestId, String location, Integer baseRating, String status, List<MediaContent> attachments, String requestConsiderationAt, String beginRequestExecutionAt, String completeRequestExecutionAt, String requestStatusCheckedAt, Boolean isModerated, Long moderatorId, List<File> filenames, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parentRequestId != null) {
            localVarFormParams.put("parent_request_id", parentRequestId);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (problemCategories != null) {
            localVarFormParams.put("problem_categories", problemCategories);
        }

        if (location != null) {
            localVarFormParams.put("location", location);
        }

        if (latitude != null) {
            localVarFormParams.put("latitude", latitude);
        }

        if (longitude != null) {
            localVarFormParams.put("longitude", longitude);
        }

        if (baseRating != null) {
            localVarFormParams.put("base_rating", baseRating);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (requestConsiderationAt != null) {
            localVarFormParams.put("request_consideration_at", requestConsiderationAt);
        }

        if (beginRequestExecutionAt != null) {
            localVarFormParams.put("begin_request_execution_at", beginRequestExecutionAt);
        }

        if (completeRequestExecutionAt != null) {
            localVarFormParams.put("complete_request_execution_at", completeRequestExecutionAt);
        }

        if (requestStatusCheckedAt != null) {
            localVarFormParams.put("request_status_checked_at", requestStatusCheckedAt);
        }

        if (isModerated != null) {
            localVarFormParams.put("is_moderated", isModerated);
        }

        if (moderatorId != null) {
            localVarFormParams.put("moderator_id", moderatorId);
        }

        if (filenames != null) {
            localVarFormParams.put("filenames", filenames);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsPostValidateBeforeCall(String description, List<Integer> problemCategories, BigDecimal latitude, BigDecimal longitude, Long parentRequestId, String location, Integer baseRating, String status, List<MediaContent> attachments, String requestConsiderationAt, String beginRequestExecutionAt, String completeRequestExecutionAt, String requestStatusCheckedAt, Boolean isModerated, Long moderatorId, List<File> filenames, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling requestsPost(Async)");
        }
        
        // verify the required parameter 'problemCategories' is set
        if (problemCategories == null) {
            throw new ApiException("Missing the required parameter 'problemCategories' when calling requestsPost(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling requestsPost(Async)");
        }
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling requestsPost(Async)");
        }
        

        okhttp3.Call localVarCall = requestsPostCall(description, problemCategories, latitude, longitude, parentRequestId, location, baseRating, status, attachments, requestConsiderationAt, beginRequestExecutionAt, completeRequestExecutionAt, requestStatusCheckedAt, isModerated, moderatorId, filenames, _callback);
        return localVarCall;

    }

    /**
     * Создаем заявку
     * 
     * @param description  (required)
     * @param problemCategories  (required)
     * @param latitude  (required)
     * @param longitude  (required)
     * @param parentRequestId идентификатор более ранней заявки по схожей проблеме (optional)
     * @param location  (optional, default to &quot;null&quot;)
     * @param baseRating фиксированный рейтинг заявки, указывается администратором для принудительного повышения (optional, default to 0)
     * @param status Тип заявки:  * &#x60;IN PROCESSING&#x60; - новая заявка  * &#x60;IN CONSIDERATION&#x60; - заявка на рассмотрении  * &#x60;IN EXECUTION&#x60; - заявка выполняется  * &#x60;IN EXECUTION CHECK&#x60; - проверка выполнения заявки  * &#x60;COMPLETED&#x60; - выполненная заявка  * &#x60;ARCHIVED&#x60; - заявка находится в архиве  (optional, default to StatusEnum.IN_PROCESSING)
     * @param attachments  (optional)
     * @param requestConsiderationAt дата начала рассмотрения заявки (optional)
     * @param beginRequestExecutionAt дата начала выполнения работ по заявке (optional)
     * @param completeRequestExecutionAt дата завершения выполнения работ по заявке (optional)
     * @param requestStatusCheckedAt дата финальной проверки выполнения (optional)
     * @param isModerated  (optional, default to true)
     * @param moderatorId  (optional)
     * @param filenames  (optional)
     * @return Request
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Request requestsPost(String description, List<Integer> problemCategories, BigDecimal latitude, BigDecimal longitude, Long parentRequestId, String location, Integer baseRating, String status, List<MediaContent> attachments, String requestConsiderationAt, String beginRequestExecutionAt, String completeRequestExecutionAt, String requestStatusCheckedAt, Boolean isModerated, Long moderatorId, List<File> filenames) throws ApiException {
        ApiResponse<Request> localVarResp = requestsPostWithHttpInfo(description, problemCategories, latitude, longitude, parentRequestId, location, baseRating, status, attachments, requestConsiderationAt, beginRequestExecutionAt, completeRequestExecutionAt, requestStatusCheckedAt, isModerated, moderatorId, filenames);
        return localVarResp.getData();
    }

    /**
     * Создаем заявку
     * 
     * @param description  (required)
     * @param problemCategories  (required)
     * @param latitude  (required)
     * @param longitude  (required)
     * @param parentRequestId идентификатор более ранней заявки по схожей проблеме (optional)
     * @param location  (optional, default to &quot;null&quot;)
     * @param baseRating фиксированный рейтинг заявки, указывается администратором для принудительного повышения (optional, default to 0)
     * @param status Тип заявки:  * &#x60;IN PROCESSING&#x60; - новая заявка  * &#x60;IN CONSIDERATION&#x60; - заявка на рассмотрении  * &#x60;IN EXECUTION&#x60; - заявка выполняется  * &#x60;IN EXECUTION CHECK&#x60; - проверка выполнения заявки  * &#x60;COMPLETED&#x60; - выполненная заявка  * &#x60;ARCHIVED&#x60; - заявка находится в архиве  (optional, default to StatusEnum.IN_PROCESSING)
     * @param attachments  (optional)
     * @param requestConsiderationAt дата начала рассмотрения заявки (optional)
     * @param beginRequestExecutionAt дата начала выполнения работ по заявке (optional)
     * @param completeRequestExecutionAt дата завершения выполнения работ по заявке (optional)
     * @param requestStatusCheckedAt дата финальной проверки выполнения (optional)
     * @param isModerated  (optional, default to true)
     * @param moderatorId  (optional)
     * @param filenames  (optional)
     * @return ApiResponse&lt;Request&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Request> requestsPostWithHttpInfo(String description, List<Integer> problemCategories, BigDecimal latitude, BigDecimal longitude, Long parentRequestId, String location, Integer baseRating, String status, List<MediaContent> attachments, String requestConsiderationAt, String beginRequestExecutionAt, String completeRequestExecutionAt, String requestStatusCheckedAt, Boolean isModerated, Long moderatorId, List<File> filenames) throws ApiException {
        okhttp3.Call localVarCall = requestsPostValidateBeforeCall(description, problemCategories, latitude, longitude, parentRequestId, location, baseRating, status, attachments, requestConsiderationAt, beginRequestExecutionAt, completeRequestExecutionAt, requestStatusCheckedAt, isModerated, moderatorId, filenames, null);
        Type localVarReturnType = new TypeToken<Request>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создаем заявку (asynchronously)
     * 
     * @param description  (required)
     * @param problemCategories  (required)
     * @param latitude  (required)
     * @param longitude  (required)
     * @param parentRequestId идентификатор более ранней заявки по схожей проблеме (optional)
     * @param location  (optional, default to &quot;null&quot;)
     * @param baseRating фиксированный рейтинг заявки, указывается администратором для принудительного повышения (optional, default to 0)
     * @param status Тип заявки:  * &#x60;IN PROCESSING&#x60; - новая заявка  * &#x60;IN CONSIDERATION&#x60; - заявка на рассмотрении  * &#x60;IN EXECUTION&#x60; - заявка выполняется  * &#x60;IN EXECUTION CHECK&#x60; - проверка выполнения заявки  * &#x60;COMPLETED&#x60; - выполненная заявка  * &#x60;ARCHIVED&#x60; - заявка находится в архиве  (optional, default to StatusEnum.IN_PROCESSING)
     * @param attachments  (optional)
     * @param requestConsiderationAt дата начала рассмотрения заявки (optional)
     * @param beginRequestExecutionAt дата начала выполнения работ по заявке (optional)
     * @param completeRequestExecutionAt дата завершения выполнения работ по заявке (optional)
     * @param requestStatusCheckedAt дата финальной проверки выполнения (optional)
     * @param isModerated  (optional, default to true)
     * @param moderatorId  (optional)
     * @param filenames  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsPostAsync(String description, List<Integer> problemCategories, BigDecimal latitude, BigDecimal longitude, Long parentRequestId, String location, Integer baseRating, String status, List<MediaContent> attachments, String requestConsiderationAt, String beginRequestExecutionAt, String completeRequestExecutionAt, String requestStatusCheckedAt, Boolean isModerated, Long moderatorId, List<File> filenames, final ApiCallback<Request> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsPostValidateBeforeCall(description, problemCategories, latitude, longitude, parentRequestId, location, baseRating, status, attachments, requestConsiderationAt, beginRequestExecutionAt, completeRequestExecutionAt, requestStatusCheckedAt, isModerated, moderatorId, filenames, _callback);
        Type localVarReturnType = new TypeToken<Request>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsRatingPost
     * @param inlineObject8  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRatingPostCall(InlineObject8 inlineObject8, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject8;

        // create path and map variables
        String localVarPath = "/requests/rating";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsRatingPostValidateBeforeCall(InlineObject8 inlineObject8, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = requestsRatingPostCall(inlineObject8, _callback);
        return localVarCall;

    }

    /**
     * модификация рейтинга заявки (+-)
     * 
     * @param inlineObject8  (optional)
     * @return List&lt;Request&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<Request> requestsRatingPost(InlineObject8 inlineObject8) throws ApiException {
        ApiResponse<List<Request>> localVarResp = requestsRatingPostWithHttpInfo(inlineObject8);
        return localVarResp.getData();
    }

    /**
     * модификация рейтинга заявки (+-)
     * 
     * @param inlineObject8  (optional)
     * @return ApiResponse&lt;List&lt;Request&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Request>> requestsRatingPostWithHttpInfo(InlineObject8 inlineObject8) throws ApiException {
        okhttp3.Call localVarCall = requestsRatingPostValidateBeforeCall(inlineObject8, null);
        Type localVarReturnType = new TypeToken<List<Request>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * модификация рейтинга заявки (+-) (asynchronously)
     * 
     * @param inlineObject8  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRatingPostAsync(InlineObject8 inlineObject8, final ApiCallback<List<Request>> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsRatingPostValidateBeforeCall(inlineObject8, _callback);
        Type localVarReturnType = new TypeToken<List<Request>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsRequestIdDelete
     * @param requestId Parameter description in CommonMark or HTML. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRequestIdDeleteCall(Long requestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests/{requestId}"
            .replaceAll("\\{" + "requestId" + "\\}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsRequestIdDeleteValidateBeforeCall(Long requestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling requestsRequestIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = requestsRequestIdDeleteCall(requestId, _callback);
        return localVarCall;

    }

    /**
     * Удаляем заявку по идентификатору
     * 
     * @param requestId Parameter description in CommonMark or HTML. (required)
     * @return Request
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Request requestsRequestIdDelete(Long requestId) throws ApiException {
        ApiResponse<Request> localVarResp = requestsRequestIdDeleteWithHttpInfo(requestId);
        return localVarResp.getData();
    }

    /**
     * Удаляем заявку по идентификатору
     * 
     * @param requestId Parameter description in CommonMark or HTML. (required)
     * @return ApiResponse&lt;Request&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Request> requestsRequestIdDeleteWithHttpInfo(Long requestId) throws ApiException {
        okhttp3.Call localVarCall = requestsRequestIdDeleteValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<Request>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Удаляем заявку по идентификатору (asynchronously)
     * 
     * @param requestId Parameter description in CommonMark or HTML. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRequestIdDeleteAsync(Long requestId, final ApiCallback<Request> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsRequestIdDeleteValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<Request>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsRequestIdGet
     * @param requestId Целочисленный идентификатор заявки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRequestIdGetCall(Long requestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests/{requestId}"
            .replaceAll("\\{" + "requestId" + "\\}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsRequestIdGetValidateBeforeCall(Long requestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling requestsRequestIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = requestsRequestIdGetCall(requestId, _callback);
        return localVarCall;

    }

    /**
     * Находим заявку по идентификатору
     * 
     * @param requestId Целочисленный идентификатор заявки (required)
     * @return Request
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Request requestsRequestIdGet(Long requestId) throws ApiException {
        ApiResponse<Request> localVarResp = requestsRequestIdGetWithHttpInfo(requestId);
        return localVarResp.getData();
    }

    /**
     * Находим заявку по идентификатору
     * 
     * @param requestId Целочисленный идентификатор заявки (required)
     * @return ApiResponse&lt;Request&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Request> requestsRequestIdGetWithHttpInfo(Long requestId) throws ApiException {
        okhttp3.Call localVarCall = requestsRequestIdGetValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<Request>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Находим заявку по идентификатору (asynchronously)
     * 
     * @param requestId Целочисленный идентификатор заявки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRequestIdGetAsync(Long requestId, final ApiCallback<Request> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsRequestIdGetValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<Request>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsRequestIdPdfGet
     * @param requestId Целочисленный идентификатор заявки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRequestIdPdfGetCall(Long requestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests/{requestId}/pdf"
            .replaceAll("\\{" + "requestId" + "\\}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsRequestIdPdfGetValidateBeforeCall(Long requestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling requestsRequestIdPdfGet(Async)");
        }
        

        okhttp3.Call localVarCall = requestsRequestIdPdfGetCall(requestId, _callback);
        return localVarCall;

    }

    /**
     * формируем заявку в виде pdf
     * 
     * @param requestId Целочисленный идентификатор заявки (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public File requestsRequestIdPdfGet(Long requestId) throws ApiException {
        ApiResponse<File> localVarResp = requestsRequestIdPdfGetWithHttpInfo(requestId);
        return localVarResp.getData();
    }

    /**
     * формируем заявку в виде pdf
     * 
     * @param requestId Целочисленный идентификатор заявки (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> requestsRequestIdPdfGetWithHttpInfo(Long requestId) throws ApiException {
        okhttp3.Call localVarCall = requestsRequestIdPdfGetValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * формируем заявку в виде pdf (asynchronously)
     * 
     * @param requestId Целочисленный идентификатор заявки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRequestIdPdfGetAsync(Long requestId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsRequestIdPdfGetValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestsRequestIdPut
     * @param requestId Целочисленный идентификатор заявки (required)
     * @param description  (required)
     * @param problemCategories  (required)
     * @param latitude  (required)
     * @param longitude  (required)
     * @param parentRequestId идентификатор более ранней заявки по схожей проблеме (optional)
     * @param location  (optional, default to &quot;null&quot;)
     * @param baseRating фиксированный рейтинг заявки, указывается администратором для принудительного повышения (optional, default to 0)
     * @param status Тип заявки:  * &#x60;IN PROCESSING&#x60; - новая заявка  * &#x60;IN CONSIDERATION&#x60; - заявка на рассмотрении  * &#x60;IN EXECUTION&#x60; - заявка выполняется  * &#x60;IN EXECUTION CHECK&#x60; - проверка выполнения заявки  * &#x60;COMPLETED&#x60; - выполненная заявка  * &#x60;ARCHIVED&#x60; - заявка находится в архиве  (optional, default to IN PROCESSING)
     * @param attachments  (optional)
     * @param requestConsiderationAt дата начала рассмотрения заявки (optional)
     * @param beginRequestExecutionAt дата начала выполнения работ по заявке (optional)
     * @param completeRequestExecutionAt дата завершения выполнения работ по заявке (optional)
     * @param requestStatusCheckedAt дата финальной проверки выполнения (optional)
     * @param isModerated  (optional, default to true)
     * @param moderatorId  (optional)
     * @param filenames  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRequestIdPutCall(Long requestId, String description, List<Integer> problemCategories, BigDecimal latitude, BigDecimal longitude, Long parentRequestId, String location, Integer baseRating, String status, List<MediaContent> attachments, String requestConsiderationAt, String beginRequestExecutionAt, String completeRequestExecutionAt, String requestStatusCheckedAt, Boolean isModerated, Long moderatorId, List<File> filenames, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requests/{requestId}"
            .replaceAll("\\{" + "requestId" + "\\}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parentRequestId != null) {
            localVarFormParams.put("parent_request_id", parentRequestId);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (problemCategories != null) {
            localVarFormParams.put("problem_categories", problemCategories);
        }

        if (location != null) {
            localVarFormParams.put("location", location);
        }

        if (latitude != null) {
            localVarFormParams.put("latitude", latitude);
        }

        if (longitude != null) {
            localVarFormParams.put("longitude", longitude);
        }

        if (baseRating != null) {
            localVarFormParams.put("base_rating", baseRating);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (requestConsiderationAt != null) {
            localVarFormParams.put("request_consideration_at", requestConsiderationAt);
        }

        if (beginRequestExecutionAt != null) {
            localVarFormParams.put("begin_request_execution_at", beginRequestExecutionAt);
        }

        if (completeRequestExecutionAt != null) {
            localVarFormParams.put("complete_request_execution_at", completeRequestExecutionAt);
        }

        if (requestStatusCheckedAt != null) {
            localVarFormParams.put("request_status_checked_at", requestStatusCheckedAt);
        }

        if (isModerated != null) {
            localVarFormParams.put("is_moderated", isModerated);
        }

        if (moderatorId != null) {
            localVarFormParams.put("moderator_id", moderatorId);
        }

        if (filenames != null) {
            localVarFormParams.put("filenames", filenames);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestsRequestIdPutValidateBeforeCall(Long requestId, String description, List<Integer> problemCategories, BigDecimal latitude, BigDecimal longitude, Long parentRequestId, String location, Integer baseRating, String status, List<MediaContent> attachments, String requestConsiderationAt, String beginRequestExecutionAt, String completeRequestExecutionAt, String requestStatusCheckedAt, Boolean isModerated, Long moderatorId, List<File> filenames, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling requestsRequestIdPut(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling requestsRequestIdPut(Async)");
        }
        
        // verify the required parameter 'problemCategories' is set
        if (problemCategories == null) {
            throw new ApiException("Missing the required parameter 'problemCategories' when calling requestsRequestIdPut(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling requestsRequestIdPut(Async)");
        }
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling requestsRequestIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = requestsRequestIdPutCall(requestId, description, problemCategories, latitude, longitude, parentRequestId, location, baseRating, status, attachments, requestConsiderationAt, beginRequestExecutionAt, completeRequestExecutionAt, requestStatusCheckedAt, isModerated, moderatorId, filenames, _callback);
        return localVarCall;

    }

    /**
     * Обновляем заявку по идентификатору
     * 
     * @param requestId Целочисленный идентификатор заявки (required)
     * @param description  (required)
     * @param problemCategories  (required)
     * @param latitude  (required)
     * @param longitude  (required)
     * @param parentRequestId идентификатор более ранней заявки по схожей проблеме (optional)
     * @param location  (optional, default to &quot;null&quot;)
     * @param baseRating фиксированный рейтинг заявки, указывается администратором для принудительного повышения (optional, default to 0)
     * @param status Тип заявки:  * &#x60;IN PROCESSING&#x60; - новая заявка  * &#x60;IN CONSIDERATION&#x60; - заявка на рассмотрении  * &#x60;IN EXECUTION&#x60; - заявка выполняется  * &#x60;IN EXECUTION CHECK&#x60; - проверка выполнения заявки  * &#x60;COMPLETED&#x60; - выполненная заявка  * &#x60;ARCHIVED&#x60; - заявка находится в архиве  (optional, default to IN PROCESSING)
     * @param attachments  (optional)
     * @param requestConsiderationAt дата начала рассмотрения заявки (optional)
     * @param beginRequestExecutionAt дата начала выполнения работ по заявке (optional)
     * @param completeRequestExecutionAt дата завершения выполнения работ по заявке (optional)
     * @param requestStatusCheckedAt дата финальной проверки выполнения (optional)
     * @param isModerated  (optional, default to true)
     * @param moderatorId  (optional)
     * @param filenames  (optional)
     * @return Request
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Request requestsRequestIdPut(Long requestId, String description, List<Integer> problemCategories, BigDecimal latitude, BigDecimal longitude, Long parentRequestId, String location, Integer baseRating, String status, List<MediaContent> attachments, String requestConsiderationAt, String beginRequestExecutionAt, String completeRequestExecutionAt, String requestStatusCheckedAt, Boolean isModerated, Long moderatorId, List<File> filenames) throws ApiException {
        ApiResponse<Request> localVarResp = requestsRequestIdPutWithHttpInfo(requestId, description, problemCategories, latitude, longitude, parentRequestId, location, baseRating, status, attachments, requestConsiderationAt, beginRequestExecutionAt, completeRequestExecutionAt, requestStatusCheckedAt, isModerated, moderatorId, filenames);
        return localVarResp.getData();
    }

    /**
     * Обновляем заявку по идентификатору
     * 
     * @param requestId Целочисленный идентификатор заявки (required)
     * @param description  (required)
     * @param problemCategories  (required)
     * @param latitude  (required)
     * @param longitude  (required)
     * @param parentRequestId идентификатор более ранней заявки по схожей проблеме (optional)
     * @param location  (optional, default to &quot;null&quot;)
     * @param baseRating фиксированный рейтинг заявки, указывается администратором для принудительного повышения (optional, default to 0)
     * @param status Тип заявки:  * &#x60;IN PROCESSING&#x60; - новая заявка  * &#x60;IN CONSIDERATION&#x60; - заявка на рассмотрении  * &#x60;IN EXECUTION&#x60; - заявка выполняется  * &#x60;IN EXECUTION CHECK&#x60; - проверка выполнения заявки  * &#x60;COMPLETED&#x60; - выполненная заявка  * &#x60;ARCHIVED&#x60; - заявка находится в архиве  (optional, default to IN PROCESSING)
     * @param attachments  (optional)
     * @param requestConsiderationAt дата начала рассмотрения заявки (optional)
     * @param beginRequestExecutionAt дата начала выполнения работ по заявке (optional)
     * @param completeRequestExecutionAt дата завершения выполнения работ по заявке (optional)
     * @param requestStatusCheckedAt дата финальной проверки выполнения (optional)
     * @param isModerated  (optional, default to true)
     * @param moderatorId  (optional)
     * @param filenames  (optional)
     * @return ApiResponse&lt;Request&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Request> requestsRequestIdPutWithHttpInfo(Long requestId, String description, List<Integer> problemCategories, BigDecimal latitude, BigDecimal longitude, Long parentRequestId, String location, Integer baseRating, String status, List<MediaContent> attachments, String requestConsiderationAt, String beginRequestExecutionAt, String completeRequestExecutionAt, String requestStatusCheckedAt, Boolean isModerated, Long moderatorId, List<File> filenames) throws ApiException {
        okhttp3.Call localVarCall = requestsRequestIdPutValidateBeforeCall(requestId, description, problemCategories, latitude, longitude, parentRequestId, location, baseRating, status, attachments, requestConsiderationAt, beginRequestExecutionAt, completeRequestExecutionAt, requestStatusCheckedAt, isModerated, moderatorId, filenames, null);
        Type localVarReturnType = new TypeToken<Request>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновляем заявку по идентификатору (asynchronously)
     * 
     * @param requestId Целочисленный идентификатор заявки (required)
     * @param description  (required)
     * @param problemCategories  (required)
     * @param latitude  (required)
     * @param longitude  (required)
     * @param parentRequestId идентификатор более ранней заявки по схожей проблеме (optional)
     * @param location  (optional, default to &quot;null&quot;)
     * @param baseRating фиксированный рейтинг заявки, указывается администратором для принудительного повышения (optional, default to 0)
     * @param status Тип заявки:  * &#x60;IN PROCESSING&#x60; - новая заявка  * &#x60;IN CONSIDERATION&#x60; - заявка на рассмотрении  * &#x60;IN EXECUTION&#x60; - заявка выполняется  * &#x60;IN EXECUTION CHECK&#x60; - проверка выполнения заявки  * &#x60;COMPLETED&#x60; - выполненная заявка  * &#x60;ARCHIVED&#x60; - заявка находится в архиве  (optional, default to IN PROCESSING)
     * @param attachments  (optional)
     * @param requestConsiderationAt дата начала рассмотрения заявки (optional)
     * @param beginRequestExecutionAt дата начала выполнения работ по заявке (optional)
     * @param completeRequestExecutionAt дата завершения выполнения работ по заявке (optional)
     * @param requestStatusCheckedAt дата финальной проверки выполнения (optional)
     * @param isModerated  (optional, default to true)
     * @param moderatorId  (optional)
     * @param filenames  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestsRequestIdPutAsync(Long requestId, String description, List<Integer> problemCategories, BigDecimal latitude, BigDecimal longitude, Long parentRequestId, String location, Integer baseRating, String status, List<MediaContent> attachments, String requestConsiderationAt, String beginRequestExecutionAt, String completeRequestExecutionAt, String requestStatusCheckedAt, Boolean isModerated, Long moderatorId, List<File> filenames, final ApiCallback<Request> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestsRequestIdPutValidateBeforeCall(requestId, description, problemCategories, latitude, longitude, parentRequestId, location, baseRating, status, attachments, requestConsiderationAt, beginRequestExecutionAt, completeRequestExecutionAt, requestStatusCheckedAt, isModerated, moderatorId, filenames, _callback);
        Type localVarReturnType = new TypeToken<Request>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesGet
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesGetCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesGetValidateBeforeCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = rolesGetCall(page, size, _callback);
        return localVarCall;

    }

    /**
     * Список всех ролей
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return PaginateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginateObject rolesGet(Long page, Long size) throws ApiException {
        ApiResponse<PaginateObject> localVarResp = rolesGetWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * Список всех ролей
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return ApiResponse&lt;PaginateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginateObject> rolesGetWithHttpInfo(Long page, Long size) throws ApiException {
        okhttp3.Call localVarCall = rolesGetValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список всех ролей (asynchronously)
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesGetAsync(Long page, Long size, final ApiCallback<PaginateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesGetValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesPost
     * @param storedRequestForm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesPostCall(StoredRequestForm storedRequestForm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = storedRequestForm;

        // create path and map variables
        String localVarPath = "/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesPostValidateBeforeCall(StoredRequestForm storedRequestForm, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = rolesPostCall(storedRequestForm, _callback);
        return localVarCall;

    }

    /**
     * Создаем черновик заявки
     * 
     * @param storedRequestForm  (optional)
     * @return StoredRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public StoredRequest rolesPost(StoredRequestForm storedRequestForm) throws ApiException {
        ApiResponse<StoredRequest> localVarResp = rolesPostWithHttpInfo(storedRequestForm);
        return localVarResp.getData();
    }

    /**
     * Создаем черновик заявки
     * 
     * @param storedRequestForm  (optional)
     * @return ApiResponse&lt;StoredRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoredRequest> rolesPostWithHttpInfo(StoredRequestForm storedRequestForm) throws ApiException {
        okhttp3.Call localVarCall = rolesPostValidateBeforeCall(storedRequestForm, null);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создаем черновик заявки (asynchronously)
     * 
     * @param storedRequestForm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesPostAsync(StoredRequestForm storedRequestForm, final ApiCallback<StoredRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesPostValidateBeforeCall(storedRequestForm, _callback);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesRoleIdDelete
     * @param roleId Parameter description in CommonMark or HTML. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesRoleIdDeleteCall(Long roleId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles/{roleId}"
            .replaceAll("\\{" + "roleId" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesRoleIdDeleteValidateBeforeCall(Long roleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling rolesRoleIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = rolesRoleIdDeleteCall(roleId, _callback);
        return localVarCall;

    }

    /**
     * Удаляем черновик заявки по идентификатору
     * 
     * @param roleId Parameter description in CommonMark or HTML. (required)
     * @return StoredRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public StoredRequest rolesRoleIdDelete(Long roleId) throws ApiException {
        ApiResponse<StoredRequest> localVarResp = rolesRoleIdDeleteWithHttpInfo(roleId);
        return localVarResp.getData();
    }

    /**
     * Удаляем черновик заявки по идентификатору
     * 
     * @param roleId Parameter description in CommonMark or HTML. (required)
     * @return ApiResponse&lt;StoredRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoredRequest> rolesRoleIdDeleteWithHttpInfo(Long roleId) throws ApiException {
        okhttp3.Call localVarCall = rolesRoleIdDeleteValidateBeforeCall(roleId, null);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Удаляем черновик заявки по идентификатору (asynchronously)
     * 
     * @param roleId Parameter description in CommonMark or HTML. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesRoleIdDeleteAsync(Long roleId, final ApiCallback<StoredRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesRoleIdDeleteValidateBeforeCall(roleId, _callback);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesRoleIdGet
     * @param roleId Целочисленный идентификатор заявки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesRoleIdGetCall(Long roleId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles/{roleId}"
            .replaceAll("\\{" + "roleId" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesRoleIdGetValidateBeforeCall(Long roleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling rolesRoleIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = rolesRoleIdGetCall(roleId, _callback);
        return localVarCall;

    }

    /**
     * Находим роль по идентификатору
     * 
     * @param roleId Целочисленный идентификатор заявки (required)
     * @return StoredRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public StoredRequest rolesRoleIdGet(Long roleId) throws ApiException {
        ApiResponse<StoredRequest> localVarResp = rolesRoleIdGetWithHttpInfo(roleId);
        return localVarResp.getData();
    }

    /**
     * Находим роль по идентификатору
     * 
     * @param roleId Целочисленный идентификатор заявки (required)
     * @return ApiResponse&lt;StoredRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoredRequest> rolesRoleIdGetWithHttpInfo(Long roleId) throws ApiException {
        okhttp3.Call localVarCall = rolesRoleIdGetValidateBeforeCall(roleId, null);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Находим роль по идентификатору (asynchronously)
     * 
     * @param roleId Целочисленный идентификатор заявки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesRoleIdGetAsync(Long roleId, final ApiCallback<StoredRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesRoleIdGetValidateBeforeCall(roleId, _callback);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesRoleIdPut
     * @param roleId Целочисленный идентификатор черновика заявки (required)
     * @param storedRequestForm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesRoleIdPutCall(Long roleId, StoredRequestForm storedRequestForm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = storedRequestForm;

        // create path and map variables
        String localVarPath = "/roles/{roleId}"
            .replaceAll("\\{" + "roleId" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesRoleIdPutValidateBeforeCall(Long roleId, StoredRequestForm storedRequestForm, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling rolesRoleIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = rolesRoleIdPutCall(roleId, storedRequestForm, _callback);
        return localVarCall;

    }

    /**
     * Обновляем черновик заявки по идентификатору
     * 
     * @param roleId Целочисленный идентификатор черновика заявки (required)
     * @param storedRequestForm  (optional)
     * @return StoredRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public StoredRequest rolesRoleIdPut(Long roleId, StoredRequestForm storedRequestForm) throws ApiException {
        ApiResponse<StoredRequest> localVarResp = rolesRoleIdPutWithHttpInfo(roleId, storedRequestForm);
        return localVarResp.getData();
    }

    /**
     * Обновляем черновик заявки по идентификатору
     * 
     * @param roleId Целочисленный идентификатор черновика заявки (required)
     * @param storedRequestForm  (optional)
     * @return ApiResponse&lt;StoredRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoredRequest> rolesRoleIdPutWithHttpInfo(Long roleId, StoredRequestForm storedRequestForm) throws ApiException {
        okhttp3.Call localVarCall = rolesRoleIdPutValidateBeforeCall(roleId, storedRequestForm, null);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновляем черновик заявки по идентификатору (asynchronously)
     * 
     * @param roleId Целочисленный идентификатор черновика заявки (required)
     * @param storedRequestForm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesRoleIdPutAsync(Long roleId, StoredRequestForm storedRequestForm, final ApiCallback<StoredRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesRoleIdPutValidateBeforeCall(roleId, storedRequestForm, _callback);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesAddressPost
     * @param inlineObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAddressPostCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/services/address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesAddressPostValidateBeforeCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = servicesAddressPostCall(inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Получаем адрес по координатам
     * 
     * @param inlineObject  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 servicesAddressPost(InlineObject inlineObject) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = servicesAddressPostWithHttpInfo(inlineObject);
        return localVarResp.getData();
    }

    /**
     * Получаем адрес по координатам
     * 
     * @param inlineObject  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> servicesAddressPostWithHttpInfo(InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = servicesAddressPostValidateBeforeCall(inlineObject, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получаем адрес по координатам (asynchronously)
     * 
     * @param inlineObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAddressPostAsync(InlineObject inlineObject, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesAddressPostValidateBeforeCall(inlineObject, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesCoordsPost
     * @param inlineObject1  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCoordsPostCall(InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/services/coords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesCoordsPostValidateBeforeCall(InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = servicesCoordsPostCall(inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * Получаем координаты по адресу
     * 
     * @param inlineObject1  (optional)
     * @return InlineObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public InlineObject servicesCoordsPost(InlineObject1 inlineObject1) throws ApiException {
        ApiResponse<InlineObject> localVarResp = servicesCoordsPostWithHttpInfo(inlineObject1);
        return localVarResp.getData();
    }

    /**
     * Получаем координаты по адресу
     * 
     * @param inlineObject1  (optional)
     * @return ApiResponse&lt;InlineObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineObject> servicesCoordsPostWithHttpInfo(InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = servicesCoordsPostValidateBeforeCall(inlineObject1, null);
        Type localVarReturnType = new TypeToken<InlineObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получаем координаты по адресу (asynchronously)
     * 
     * @param inlineObject1  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCoordsPostAsync(InlineObject1 inlineObject1, final ApiCallback<InlineObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesCoordsPostValidateBeforeCall(inlineObject1, _callback);
        Type localVarReturnType = new TypeToken<InlineObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesHeatmapPost
     * @param inlineObject4  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesHeatmapPostCall(InlineObject4 inlineObject4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject4;

        // create path and map variables
        String localVarPath = "/services/heatmap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesHeatmapPostValidateBeforeCall(InlineObject4 inlineObject4, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = servicesHeatmapPostCall(inlineObject4, _callback);
        return localVarCall;

    }

    /**
     * тепловая карта проблемных \\ решенных зон за период
     * 
     * @param inlineObject4  (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 servicesHeatmapPost(InlineObject4 inlineObject4) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = servicesHeatmapPostWithHttpInfo(inlineObject4);
        return localVarResp.getData();
    }

    /**
     * тепловая карта проблемных \\ решенных зон за период
     * 
     * @param inlineObject4  (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> servicesHeatmapPostWithHttpInfo(InlineObject4 inlineObject4) throws ApiException {
        okhttp3.Call localVarCall = servicesHeatmapPostValidateBeforeCall(inlineObject4, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * тепловая карта проблемных \\ решенных зон за период (asynchronously)
     * 
     * @param inlineObject4  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesHeatmapPostAsync(InlineObject4 inlineObject4, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesHeatmapPostValidateBeforeCall(inlineObject4, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesMailingPost
     * @param title  (optional)
     * @param message  (optional)
     * @param level Уровень сообщения:   * &#x60;INFO&#x60; - оповещение   * &#x60;DANGER&#x60; - критически важное   * &#x60;WARNING&#x60; - предупреждение  (optional)
     * @param type Тип сообщения:   * &#x60;COORDS_ALERT&#x60; - отметка на карте (на случай проишествия)   * &#x60;TEXT&#x60; - текстовое сообщение с вложениями  (optional)
     * @param sendAs Способ отправки оповещения (по умолчанию отправка на почту):   * &#x60;AS_NOTIFICATION&#x60; - всплывающее сообщение   * &#x60;AS_EMAIL&#x60; - почтовое сообщение   * &#x60;AS_EMAIL_AND_NOTIFICATION&#x60; - всплывающее сообщение + почта   * &#x60;AS_SMS&#x60; - по СМС   * &#x60;ALL&#x60; - одновременно через все каналы оповещений  (optional, default to AS_EMAIL)
     * @param userIds приоритетный фильтр для рассылки (optional)
     * @param category Категория отправки:   * &#x60;SELECTED_USERS&#x60; - только указанным пользователям   * &#x60;ONLY_USERS&#x60; - только пользователям   * &#x60;ALL&#x60; - всем   * &#x60;ONLY_ACTIVE_REQUEST&#x60; - только пользователям, у которых активные заявки   * &#x60;ONLY_ARCHIVE_REQUEST&#x60; - только пользователям с архивными заявками   * &#x60;ONLY_CONTRACTORS&#x60; - только исполнительным \\\\ контролирующим органам   * &#x60;ONLY_CONTRACTORS_EXECUTIVE&#x60; - только исполнительным органам   * &#x60;ONLY_CONTRACTORS_SUPERVISING&#x60; - только контролирующим органам  (optional)
     * @param filenames  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesMailingPostCall(String title, String message, String level, String type, String sendAs, List<Integer> userIds, String category, List<File> filenames, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/mailing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (message != null) {
            localVarFormParams.put("message", message);
        }

        if (level != null) {
            localVarFormParams.put("level", level);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        if (sendAs != null) {
            localVarFormParams.put("send_as", sendAs);
        }

        if (userIds != null) {
            localVarFormParams.put("user_ids", userIds);
        }

        if (category != null) {
            localVarFormParams.put("category", category);
        }

        if (filenames != null) {
            localVarFormParams.put("filenames", filenames);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesMailingPostValidateBeforeCall(String title, String message, String level, String type, String sendAs, List<Integer> userIds, String category, List<File> filenames, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = servicesMailingPostCall(title, message, level, type, sendAs, userIds, category, filenames, _callback);
        return localVarCall;

    }

    /**
     * оповещение пользователей
     * 
     * @param title  (optional)
     * @param message  (optional)
     * @param level Уровень сообщения:   * &#x60;INFO&#x60; - оповещение   * &#x60;DANGER&#x60; - критически важное   * &#x60;WARNING&#x60; - предупреждение  (optional)
     * @param type Тип сообщения:   * &#x60;COORDS_ALERT&#x60; - отметка на карте (на случай проишествия)   * &#x60;TEXT&#x60; - текстовое сообщение с вложениями  (optional)
     * @param sendAs Способ отправки оповещения (по умолчанию отправка на почту):   * &#x60;AS_NOTIFICATION&#x60; - всплывающее сообщение   * &#x60;AS_EMAIL&#x60; - почтовое сообщение   * &#x60;AS_EMAIL_AND_NOTIFICATION&#x60; - всплывающее сообщение + почта   * &#x60;AS_SMS&#x60; - по СМС   * &#x60;ALL&#x60; - одновременно через все каналы оповещений  (optional, default to AS_EMAIL)
     * @param userIds приоритетный фильтр для рассылки (optional)
     * @param category Категория отправки:   * &#x60;SELECTED_USERS&#x60; - только указанным пользователям   * &#x60;ONLY_USERS&#x60; - только пользователям   * &#x60;ALL&#x60; - всем   * &#x60;ONLY_ACTIVE_REQUEST&#x60; - только пользователям, у которых активные заявки   * &#x60;ONLY_ARCHIVE_REQUEST&#x60; - только пользователям с архивными заявками   * &#x60;ONLY_CONTRACTORS&#x60; - только исполнительным \\\\ контролирующим органам   * &#x60;ONLY_CONTRACTORS_EXECUTIVE&#x60; - только исполнительным органам   * &#x60;ONLY_CONTRACTORS_SUPERVISING&#x60; - только контролирующим органам  (optional)
     * @param filenames  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void servicesMailingPost(String title, String message, String level, String type, String sendAs, List<Integer> userIds, String category, List<File> filenames) throws ApiException {
        servicesMailingPostWithHttpInfo(title, message, level, type, sendAs, userIds, category, filenames);
    }

    /**
     * оповещение пользователей
     * 
     * @param title  (optional)
     * @param message  (optional)
     * @param level Уровень сообщения:   * &#x60;INFO&#x60; - оповещение   * &#x60;DANGER&#x60; - критически важное   * &#x60;WARNING&#x60; - предупреждение  (optional)
     * @param type Тип сообщения:   * &#x60;COORDS_ALERT&#x60; - отметка на карте (на случай проишествия)   * &#x60;TEXT&#x60; - текстовое сообщение с вложениями  (optional)
     * @param sendAs Способ отправки оповещения (по умолчанию отправка на почту):   * &#x60;AS_NOTIFICATION&#x60; - всплывающее сообщение   * &#x60;AS_EMAIL&#x60; - почтовое сообщение   * &#x60;AS_EMAIL_AND_NOTIFICATION&#x60; - всплывающее сообщение + почта   * &#x60;AS_SMS&#x60; - по СМС   * &#x60;ALL&#x60; - одновременно через все каналы оповещений  (optional, default to AS_EMAIL)
     * @param userIds приоритетный фильтр для рассылки (optional)
     * @param category Категория отправки:   * &#x60;SELECTED_USERS&#x60; - только указанным пользователям   * &#x60;ONLY_USERS&#x60; - только пользователям   * &#x60;ALL&#x60; - всем   * &#x60;ONLY_ACTIVE_REQUEST&#x60; - только пользователям, у которых активные заявки   * &#x60;ONLY_ARCHIVE_REQUEST&#x60; - только пользователям с архивными заявками   * &#x60;ONLY_CONTRACTORS&#x60; - только исполнительным \\\\ контролирующим органам   * &#x60;ONLY_CONTRACTORS_EXECUTIVE&#x60; - только исполнительным органам   * &#x60;ONLY_CONTRACTORS_SUPERVISING&#x60; - только контролирующим органам  (optional)
     * @param filenames  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesMailingPostWithHttpInfo(String title, String message, String level, String type, String sendAs, List<Integer> userIds, String category, List<File> filenames) throws ApiException {
        okhttp3.Call localVarCall = servicesMailingPostValidateBeforeCall(title, message, level, type, sendAs, userIds, category, filenames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * оповещение пользователей (asynchronously)
     * 
     * @param title  (optional)
     * @param message  (optional)
     * @param level Уровень сообщения:   * &#x60;INFO&#x60; - оповещение   * &#x60;DANGER&#x60; - критически важное   * &#x60;WARNING&#x60; - предупреждение  (optional)
     * @param type Тип сообщения:   * &#x60;COORDS_ALERT&#x60; - отметка на карте (на случай проишествия)   * &#x60;TEXT&#x60; - текстовое сообщение с вложениями  (optional)
     * @param sendAs Способ отправки оповещения (по умолчанию отправка на почту):   * &#x60;AS_NOTIFICATION&#x60; - всплывающее сообщение   * &#x60;AS_EMAIL&#x60; - почтовое сообщение   * &#x60;AS_EMAIL_AND_NOTIFICATION&#x60; - всплывающее сообщение + почта   * &#x60;AS_SMS&#x60; - по СМС   * &#x60;ALL&#x60; - одновременно через все каналы оповещений  (optional, default to AS_EMAIL)
     * @param userIds приоритетный фильтр для рассылки (optional)
     * @param category Категория отправки:   * &#x60;SELECTED_USERS&#x60; - только указанным пользователям   * &#x60;ONLY_USERS&#x60; - только пользователям   * &#x60;ALL&#x60; - всем   * &#x60;ONLY_ACTIVE_REQUEST&#x60; - только пользователям, у которых активные заявки   * &#x60;ONLY_ARCHIVE_REQUEST&#x60; - только пользователям с архивными заявками   * &#x60;ONLY_CONTRACTORS&#x60; - только исполнительным \\\\ контролирующим органам   * &#x60;ONLY_CONTRACTORS_EXECUTIVE&#x60; - только исполнительным органам   * &#x60;ONLY_CONTRACTORS_SUPERVISING&#x60; - только контролирующим органам  (optional)
     * @param filenames  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesMailingPostAsync(String title, String message, String level, String type, String sendAs, List<Integer> userIds, String category, List<File> filenames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesMailingPostValidateBeforeCall(title, message, level, type, sendAs, userIds, category, filenames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesRequestExportPost
     * @param inlineObject6  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesRequestExportPostCall(InlineObject6 inlineObject6, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject6;

        // create path and map variables
        String localVarPath = "/services/request/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/binary", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesRequestExportPostValidateBeforeCall(InlineObject6 inlineObject6, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = servicesRequestExportPostCall(inlineObject6, _callback);
        return localVarCall;

    }

    /**
     * экспортирование заявок в формате Excel-файла
     * 
     * @param inlineObject6  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public File servicesRequestExportPost(InlineObject6 inlineObject6) throws ApiException {
        ApiResponse<File> localVarResp = servicesRequestExportPostWithHttpInfo(inlineObject6);
        return localVarResp.getData();
    }

    /**
     * экспортирование заявок в формате Excel-файла
     * 
     * @param inlineObject6  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> servicesRequestExportPostWithHttpInfo(InlineObject6 inlineObject6) throws ApiException {
        okhttp3.Call localVarCall = servicesRequestExportPostValidateBeforeCall(inlineObject6, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * экспортирование заявок в формате Excel-файла (asynchronously)
     * 
     * @param inlineObject6  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesRequestExportPostAsync(InlineObject6 inlineObject6, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesRequestExportPostValidateBeforeCall(inlineObject6, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesRequestImportPost
     * @param filenames  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesRequestImportPostCall(List<File> filenames, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/request/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filenames != null) {
            localVarFormParams.put("filenames", filenames);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesRequestImportPostValidateBeforeCall(List<File> filenames, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = servicesRequestImportPostCall(filenames, _callback);
        return localVarCall;

    }

    /**
     * импортирование заявок в формате Excel-файла(ов)
     * 
     * @param filenames  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void servicesRequestImportPost(List<File> filenames) throws ApiException {
        servicesRequestImportPostWithHttpInfo(filenames);
    }

    /**
     * импортирование заявок в формате Excel-файла(ов)
     * 
     * @param filenames  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesRequestImportPostWithHttpInfo(List<File> filenames) throws ApiException {
        okhttp3.Call localVarCall = servicesRequestImportPostValidateBeforeCall(filenames, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * импортирование заявок в формате Excel-файла(ов) (asynchronously)
     * 
     * @param filenames  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesRequestImportPostAsync(List<File> filenames, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesRequestImportPostValidateBeforeCall(filenames, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesStatisticPost
     * @param inlineObject3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesStatisticPostCall(InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject3;

        // create path and map variables
        String localVarPath = "/services/statistic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesStatisticPostValidateBeforeCall(InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = servicesStatisticPostCall(inlineObject3, _callback);
        return localVarCall;

    }

    /**
     * статистика по категориям за период
     * 
     * @param inlineObject3  (optional)
     * @return InlineObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public InlineObject servicesStatisticPost(InlineObject3 inlineObject3) throws ApiException {
        ApiResponse<InlineObject> localVarResp = servicesStatisticPostWithHttpInfo(inlineObject3);
        return localVarResp.getData();
    }

    /**
     * статистика по категориям за период
     * 
     * @param inlineObject3  (optional)
     * @return ApiResponse&lt;InlineObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineObject> servicesStatisticPostWithHttpInfo(InlineObject3 inlineObject3) throws ApiException {
        okhttp3.Call localVarCall = servicesStatisticPostValidateBeforeCall(inlineObject3, null);
        Type localVarReturnType = new TypeToken<InlineObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * статистика по категориям за период (asynchronously)
     * 
     * @param inlineObject3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesStatisticPostAsync(InlineObject3 inlineObject3, final ApiCallback<InlineObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesStatisticPostValidateBeforeCall(inlineObject3, _callback);
        Type localVarReturnType = new TypeToken<InlineObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storedRequestsGet
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storedRequestsGetCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stored-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storedRequestsGetValidateBeforeCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storedRequestsGetCall(page, size, _callback);
        return localVarCall;

    }

    /**
     * Список черновиков заявок
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return PaginateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginateObject storedRequestsGet(Long page, Long size) throws ApiException {
        ApiResponse<PaginateObject> localVarResp = storedRequestsGetWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * Список черновиков заявок
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return ApiResponse&lt;PaginateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginateObject> storedRequestsGetWithHttpInfo(Long page, Long size) throws ApiException {
        okhttp3.Call localVarCall = storedRequestsGetValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список черновиков заявок (asynchronously)
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storedRequestsGetAsync(Long page, Long size, final ApiCallback<PaginateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = storedRequestsGetValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storedRequestsPost
     * @param storedRequestForm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storedRequestsPostCall(StoredRequestForm storedRequestForm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = storedRequestForm;

        // create path and map variables
        String localVarPath = "/stored-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storedRequestsPostValidateBeforeCall(StoredRequestForm storedRequestForm, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storedRequestsPostCall(storedRequestForm, _callback);
        return localVarCall;

    }

    /**
     * Создаем черновик заявки
     * 
     * @param storedRequestForm  (optional)
     * @return StoredRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public StoredRequest storedRequestsPost(StoredRequestForm storedRequestForm) throws ApiException {
        ApiResponse<StoredRequest> localVarResp = storedRequestsPostWithHttpInfo(storedRequestForm);
        return localVarResp.getData();
    }

    /**
     * Создаем черновик заявки
     * 
     * @param storedRequestForm  (optional)
     * @return ApiResponse&lt;StoredRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoredRequest> storedRequestsPostWithHttpInfo(StoredRequestForm storedRequestForm) throws ApiException {
        okhttp3.Call localVarCall = storedRequestsPostValidateBeforeCall(storedRequestForm, null);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создаем черновик заявки (asynchronously)
     * 
     * @param storedRequestForm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storedRequestsPostAsync(StoredRequestForm storedRequestForm, final ApiCallback<StoredRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = storedRequestsPostValidateBeforeCall(storedRequestForm, _callback);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storedRequestsStoredRequestIdDelete
     * @param storedRequestId Parameter description in CommonMark or HTML. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storedRequestsStoredRequestIdDeleteCall(Long storedRequestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stored-requests/{storedRequestId}"
            .replaceAll("\\{" + "storedRequestId" + "\\}", localVarApiClient.escapeString(storedRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storedRequestsStoredRequestIdDeleteValidateBeforeCall(Long storedRequestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'storedRequestId' is set
        if (storedRequestId == null) {
            throw new ApiException("Missing the required parameter 'storedRequestId' when calling storedRequestsStoredRequestIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = storedRequestsStoredRequestIdDeleteCall(storedRequestId, _callback);
        return localVarCall;

    }

    /**
     * Удаляем черновик заявки по идентификатору
     * 
     * @param storedRequestId Parameter description in CommonMark or HTML. (required)
     * @return StoredRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public StoredRequest storedRequestsStoredRequestIdDelete(Long storedRequestId) throws ApiException {
        ApiResponse<StoredRequest> localVarResp = storedRequestsStoredRequestIdDeleteWithHttpInfo(storedRequestId);
        return localVarResp.getData();
    }

    /**
     * Удаляем черновик заявки по идентификатору
     * 
     * @param storedRequestId Parameter description in CommonMark or HTML. (required)
     * @return ApiResponse&lt;StoredRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoredRequest> storedRequestsStoredRequestIdDeleteWithHttpInfo(Long storedRequestId) throws ApiException {
        okhttp3.Call localVarCall = storedRequestsStoredRequestIdDeleteValidateBeforeCall(storedRequestId, null);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Удаляем черновик заявки по идентификатору (asynchronously)
     * 
     * @param storedRequestId Parameter description in CommonMark or HTML. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storedRequestsStoredRequestIdDeleteAsync(Long storedRequestId, final ApiCallback<StoredRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = storedRequestsStoredRequestIdDeleteValidateBeforeCall(storedRequestId, _callback);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storedRequestsStoredRequestIdGet
     * @param storedRequestId Целочисленный идентификатор заявки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storedRequestsStoredRequestIdGetCall(Long storedRequestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stored-requests/{storedRequestId}"
            .replaceAll("\\{" + "storedRequestId" + "\\}", localVarApiClient.escapeString(storedRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storedRequestsStoredRequestIdGetValidateBeforeCall(Long storedRequestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'storedRequestId' is set
        if (storedRequestId == null) {
            throw new ApiException("Missing the required parameter 'storedRequestId' when calling storedRequestsStoredRequestIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = storedRequestsStoredRequestIdGetCall(storedRequestId, _callback);
        return localVarCall;

    }

    /**
     * Находим черновик заявки по идентификатору
     * 
     * @param storedRequestId Целочисленный идентификатор заявки (required)
     * @return StoredRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public StoredRequest storedRequestsStoredRequestIdGet(Long storedRequestId) throws ApiException {
        ApiResponse<StoredRequest> localVarResp = storedRequestsStoredRequestIdGetWithHttpInfo(storedRequestId);
        return localVarResp.getData();
    }

    /**
     * Находим черновик заявки по идентификатору
     * 
     * @param storedRequestId Целочисленный идентификатор заявки (required)
     * @return ApiResponse&lt;StoredRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoredRequest> storedRequestsStoredRequestIdGetWithHttpInfo(Long storedRequestId) throws ApiException {
        okhttp3.Call localVarCall = storedRequestsStoredRequestIdGetValidateBeforeCall(storedRequestId, null);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Находим черновик заявки по идентификатору (asynchronously)
     * 
     * @param storedRequestId Целочисленный идентификатор заявки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storedRequestsStoredRequestIdGetAsync(Long storedRequestId, final ApiCallback<StoredRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = storedRequestsStoredRequestIdGetValidateBeforeCall(storedRequestId, _callback);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storedRequestsStoredRequestIdPut
     * @param storedRequestId Целочисленный идентификатор черновика заявки (required)
     * @param storedRequestForm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storedRequestsStoredRequestIdPutCall(Long storedRequestId, StoredRequestForm storedRequestForm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = storedRequestForm;

        // create path and map variables
        String localVarPath = "/stored-requests/{storedRequestId}"
            .replaceAll("\\{" + "storedRequestId" + "\\}", localVarApiClient.escapeString(storedRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storedRequestsStoredRequestIdPutValidateBeforeCall(Long storedRequestId, StoredRequestForm storedRequestForm, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'storedRequestId' is set
        if (storedRequestId == null) {
            throw new ApiException("Missing the required parameter 'storedRequestId' when calling storedRequestsStoredRequestIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = storedRequestsStoredRequestIdPutCall(storedRequestId, storedRequestForm, _callback);
        return localVarCall;

    }

    /**
     * Обновляем черновик заявки по идентификатору
     * 
     * @param storedRequestId Целочисленный идентификатор черновика заявки (required)
     * @param storedRequestForm  (optional)
     * @return StoredRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public StoredRequest storedRequestsStoredRequestIdPut(Long storedRequestId, StoredRequestForm storedRequestForm) throws ApiException {
        ApiResponse<StoredRequest> localVarResp = storedRequestsStoredRequestIdPutWithHttpInfo(storedRequestId, storedRequestForm);
        return localVarResp.getData();
    }

    /**
     * Обновляем черновик заявки по идентификатору
     * 
     * @param storedRequestId Целочисленный идентификатор черновика заявки (required)
     * @param storedRequestForm  (optional)
     * @return ApiResponse&lt;StoredRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoredRequest> storedRequestsStoredRequestIdPutWithHttpInfo(Long storedRequestId, StoredRequestForm storedRequestForm) throws ApiException {
        okhttp3.Call localVarCall = storedRequestsStoredRequestIdPutValidateBeforeCall(storedRequestId, storedRequestForm, null);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновляем черновик заявки по идентификатору (asynchronously)
     * 
     * @param storedRequestId Целочисленный идентификатор черновика заявки (required)
     * @param storedRequestForm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор черновика заявки не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storedRequestsStoredRequestIdPutAsync(Long storedRequestId, StoredRequestForm storedRequestForm, final ApiCallback<StoredRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = storedRequestsStoredRequestIdPutValidateBeforeCall(storedRequestId, storedRequestForm, _callback);
        Type localVarReturnType = new TypeToken<StoredRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGet
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetValidateBeforeCall(Long page, Long size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersGetCall(page, size, _callback);
        return localVarCall;

    }

    /**
     * Список пользователей
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return PaginateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginateObject usersGet(Long page, Long size) throws ApiException {
        ApiResponse<PaginateObject> localVarResp = usersGetWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * Список пользователей
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @return ApiResponse&lt;PaginateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginateObject> usersGetWithHttpInfo(Long page, Long size) throws ApiException {
        okhttp3.Call localVarCall = usersGetValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список пользователей (asynchronously)
     * 
     * @param page идентификатор страницы (optional)
     * @param size размер выдачи на странице (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetAsync(Long page, Long size, final ApiCallback<PaginateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersMeGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersMeGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersMeGetCall(_callback);
        return localVarCall;

    }

    /**
     * возвращаем текущего пользователя
     * 
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public User usersMeGet() throws ApiException {
        ApiResponse<User> localVarResp = usersMeGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * возвращаем текущего пользователя
     * 
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersMeGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usersMeGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * возвращаем текущего пользователя (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeGetAsync(final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersMeGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersPost
     * @param userForm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostCall(UserForm userForm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userForm;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersPostValidateBeforeCall(UserForm userForm, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersPostCall(userForm, _callback);
        return localVarCall;

    }

    /**
     * Создаем пользователя
     * 
     * @param userForm  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public User usersPost(UserForm userForm) throws ApiException {
        ApiResponse<User> localVarResp = usersPostWithHttpInfo(userForm);
        return localVarResp.getData();
    }

    /**
     * Создаем пользователя
     * 
     * @param userForm  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersPostWithHttpInfo(UserForm userForm) throws ApiException {
        okhttp3.Call localVarCall = usersPostValidateBeforeCall(userForm, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создаем пользователя (asynchronously)
     * 
     * @param userForm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostAsync(UserForm userForm, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersPostValidateBeforeCall(userForm, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdDelete
     * @param userId Parameter description in CommonMark or HTML. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdDeleteCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdDeleteValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = usersUserIdDeleteCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Удаляем пользователя по идентификатору
     * 
     * @param userId Parameter description in CommonMark or HTML. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public User usersUserIdDelete(Long userId) throws ApiException {
        ApiResponse<User> localVarResp = usersUserIdDeleteWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Удаляем пользователя по идентификатору
     * 
     * @param userId Parameter description in CommonMark or HTML. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersUserIdDeleteWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdDeleteValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Удаляем пользователя по идентификатору (asynchronously)
     * 
     * @param userId Parameter description in CommonMark or HTML. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified user ID is invalid (not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdDeleteAsync(Long userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdDeleteValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdGet
     * @param userId Целочисленный идентификатор пользователя (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdGetCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdGetValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = usersUserIdGetCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Находим пользователя по идентификатору
     * 
     * @param userId Целочисленный идентификатор пользователя (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public User usersUserIdGet(Long userId) throws ApiException {
        ApiResponse<User> localVarResp = usersUserIdGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Находим пользователя по идентификатору
     * 
     * @param userId Целочисленный идентификатор пользователя (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersUserIdGetWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Находим пользователя по идентификатору (asynchronously)
     * 
     * @param userId Целочисленный идентификатор пользователя (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdGetAsync(Long userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdProfileGet
     * @param userId Целочисленный идентификатор пользователя (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdProfileGetCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/profile"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdProfileGetValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdProfileGet(Async)");
        }
        

        okhttp3.Call localVarCall = usersUserIdProfileGetCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Находим профиль пользователя по идентификатору пользователя
     * 
     * @param userId Целочисленный идентификатор пользователя (required)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Profile usersUserIdProfileGet(Long userId) throws ApiException {
        ApiResponse<Profile> localVarResp = usersUserIdProfileGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Находим профиль пользователя по идентификатору пользователя
     * 
     * @param userId Целочисленный идентификатор пользователя (required)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> usersUserIdProfileGetWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdProfileGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Находим профиль пользователя по идентификатору пользователя (asynchronously)
     * 
     * @param userId Целочисленный идентификатор пользователя (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdProfileGetAsync(Long userId, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdProfileGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdPut
     * @param userId Целочисленный идентификатор пользователя (required)
     * @param userForm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdPutCall(Long userId, UserForm userForm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userForm;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdPutValidateBeforeCall(Long userId, UserForm userForm, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = usersUserIdPutCall(userId, userForm, _callback);
        return localVarCall;

    }

    /**
     * Обновляем пользователя по идентификатору
     * 
     * @param userId Целочисленный идентификатор пользователя (required)
     * @param userForm  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public User usersUserIdPut(Long userId, UserForm userForm) throws ApiException {
        ApiResponse<User> localVarResp = usersUserIdPutWithHttpInfo(userId, userForm);
        return localVarResp.getData();
    }

    /**
     * Обновляем пользователя по идентификатору
     * 
     * @param userId Целочисленный идентификатор пользователя (required)
     * @param userForm  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersUserIdPutWithHttpInfo(Long userId, UserForm userForm) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdPutValidateBeforeCall(userId, userForm, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновляем пользователя по идентификатору (asynchronously)
     * 
     * @param userId Целочисленный идентификатор пользователя (required)
     * @param userForm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Указанный идентификатор пользователя не является числом </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A user with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdPutAsync(Long userId, UserForm userForm, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdPutValidateBeforeCall(userId, userForm, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
