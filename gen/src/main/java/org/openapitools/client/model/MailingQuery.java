/*
 * API системы \"Народный контроль\"
 *  <h2>Приложение Народный контроль</h2> <p><strong>Основная цель</strong>: контроль за состоянием сфер жизнедеятельности города по отраслям:</p> <ul> <li>общественный транспорт (мин.транс)</li> <li>состояние дорог и прилегающий территорий (мин.транс)</li> <li>состояние благоустройства города (мин. хоз)</li> <li>аварийные участки города, прорывы водо- тепло- коммуникаций, обрывы электро коммуникаций  (жэк)</li> <li>постройки в аварийном состоянии (мин. Хоз)</li> <li>уборка территории и вывоз отходов (мин. Хоз)</li> <li>некачественные товары (потреб контроль)</li> <li>скопление животных (мин. Хоз)</li> <li>последствия стихийных бедствий  (мин. Хоз,  мчс)</li> <li>последствие военных действий (мчс, военные, мин. Транс)</li> <li>проявления вандализмам (в т.ч. размещение рекламы в неположенном месте)</li> <li>состояние фортификационных сооружений (мчс)</li> <li>состояние рабочего места (проф. Комиссии)</li> <li>регулярное скопление криминальных (или асоциальных) элементов общества или проявление аморального поведения в общественных местах (мин. Хоз)</li> <li>нарушение ПДД участниками дорожного движения (мвд)</li> <li>также могут быть заявки без категории</li> <li>инициативы граждан - полезные нововведения от граждан</li> <li>заявки на утерянные или найденные вещи</li> </ul> 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: exxxar@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.MailingQueryMessageObject;

/**
 * MailingQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-12T00:27:59.866835800+03:00[Europe/Moscow]")
public class MailingQuery {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_ADDRESS_TO = "address_to";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TO)
  private String addressTo;

  /**
   * Тип рассылки:   * &#x60;PHONE&#x60; - при помощи смс   * &#x60;MAIL&#x60; - при помощи почты 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PHONE("PHONE"),
    
    MAIL("MAIL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Статус отправки:   * &#x60;SUCCESS&#x60; - успешная отправка   * &#x60;FAILURE&#x60; - ошибка при попытке отправки 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUCCESS("SUCCESS"),
    
    FAILURE("FAILURE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "template_name";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  private String templateName = "null";

  public static final String SERIALIZED_NAME_MESSAGE_OBJECT = "message_object";
  @SerializedName(SERIALIZED_NAME_MESSAGE_OBJECT)
  private MailingQueryMessageObject messageObject;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private Long requestId;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private String deletedAt = "null";

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt = "null";

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt = "null";


  public MailingQuery id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public MailingQuery addressTo(String addressTo) {
    
    this.addressTo = addressTo;
    return this;
  }

   /**
   * Get addressTo
   * @return addressTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0710000000 or test@test.com", value = "")

  public String getAddressTo() {
    return addressTo;
  }


  public void setAddressTo(String addressTo) {
    this.addressTo = addressTo;
  }


  public MailingQuery type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Тип рассылки:   * &#x60;PHONE&#x60; - при помощи смс   * &#x60;MAIL&#x60; - при помощи почты 
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Тип рассылки:   * `PHONE` - при помощи смс   * `MAIL` - при помощи почты ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MailingQuery status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Статус отправки:   * &#x60;SUCCESS&#x60; - успешная отправка   * &#x60;FAILURE&#x60; - ошибка при попытке отправки 
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Статус отправки:   * `SUCCESS` - успешная отправка   * `FAILURE` - ошибка при попытке отправки ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public MailingQuery templateName(String templateName) {
    
    this.templateName = templateName;
    return this;
  }

   /**
   * Название шаблона для рассылки (для email)
   * @return templateName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "invoice.html", value = "Название шаблона для рассылки (для email)")

  public String getTemplateName() {
    return templateName;
  }


  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }


  public MailingQuery messageObject(MailingQueryMessageObject messageObject) {
    
    this.messageObject = messageObject;
    return this;
  }

   /**
   * Get messageObject
   * @return messageObject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MailingQueryMessageObject getMessageObject() {
    return messageObject;
  }


  public void setMessageObject(MailingQueryMessageObject messageObject) {
    this.messageObject = messageObject;
  }


  public MailingQuery requestId(Long requestId) {
    
    this.requestId = requestId;
    return this;
  }

   /**
   * Get requestId
   * @return requestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Long getRequestId() {
    return requestId;
  }


  public void setRequestId(Long requestId) {
    this.requestId = requestId;
  }


  public MailingQuery deletedAt(String deletedAt) {
    
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * Get deletedAt
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-01 12:00:00", value = "")

  public String getDeletedAt() {
    return deletedAt;
  }


  public void setDeletedAt(String deletedAt) {
    this.deletedAt = deletedAt;
  }


  public MailingQuery createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-01 12:00:00", value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public MailingQuery updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-01 12:00:00", value = "")

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailingQuery mailingQuery = (MailingQuery) o;
    return Objects.equals(this.id, mailingQuery.id) &&
        Objects.equals(this.addressTo, mailingQuery.addressTo) &&
        Objects.equals(this.type, mailingQuery.type) &&
        Objects.equals(this.status, mailingQuery.status) &&
        Objects.equals(this.templateName, mailingQuery.templateName) &&
        Objects.equals(this.messageObject, mailingQuery.messageObject) &&
        Objects.equals(this.requestId, mailingQuery.requestId) &&
        Objects.equals(this.deletedAt, mailingQuery.deletedAt) &&
        Objects.equals(this.createdAt, mailingQuery.createdAt) &&
        Objects.equals(this.updatedAt, mailingQuery.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, addressTo, type, status, templateName, messageObject, requestId, deletedAt, createdAt, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailingQuery {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    addressTo: ").append(toIndentedString(addressTo)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    messageObject: ").append(toIndentedString(messageObject)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

