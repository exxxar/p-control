/*
 * API системы \"Народный контроль\"
 *  <h2>Приложение Народный контроль</h2> <p><strong>Основная цель</strong>: контроль за состоянием сфер жизнедеятельности города по отраслям:</p> <ul> <li>общественный транспорт (мин.транс)</li> <li>состояние дорог и прилегающий территорий (мин.транс)</li> <li>состояние благоустройства города (мин. хоз)</li> <li>аварийные участки города, прорывы водо- тепло- коммуникаций, обрывы электро коммуникаций  (жэк)</li> <li>постройки в аварийном состоянии (мин. Хоз)</li> <li>уборка территории и вывоз отходов (мин. Хоз)</li> <li>некачественные товары (потреб контроль)</li> <li>скопление животных (мин. Хоз)</li> <li>последствия стихийных бедствий  (мин. Хоз,  мчс)</li> <li>последствие военных действий (мчс, военные, мин. Транс)</li> <li>проявления вандализмам (в т.ч. размещение рекламы в неположенном месте)</li> <li>состояние фортификационных сооружений (мчс)</li> <li>состояние рабочего места (проф. Комиссии)</li> <li>регулярное скопление криминальных (или асоциальных) элементов общества или проявление аморального поведения в общественных местах (мин. Хоз)</li> <li>нарушение ПДД участниками дорожного движения (мвд)</li> <li>также могут быть заявки без категории</li> <li>инициативы граждан - полезные нововведения от граждан</li> <li>заявки на утерянные или найденные вещи</li> </ul> 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: exxxar@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.MediaContent;

/**
 * ContractorTaskForm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-12T00:27:59.866835800+03:00[Europe/Moscow]")
public class ContractorTaskForm {
  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private Long requestId;

  public static final String SERIALIZED_NAME_CONTRACTOR_ID = "contractor_id";
  @SerializedName(SERIALIZED_NAME_CONTRACTOR_ID)
  private Long contractorId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RESPONSIBLE_PERSON = "responsible_person";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_PERSON)
  private String responsiblePerson;

  public static final String SERIALIZED_NAME_CONTACT_PHONE = "contact_phone";
  @SerializedName(SERIALIZED_NAME_CONTACT_PHONE)
  private String contactPhone;

  public static final String SERIALIZED_NAME_CONTACT_EMAIL = "contact_email";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL)
  private String contactEmail;

  public static final String SERIALIZED_NAME_ESTIMATED_TASK_PROCESSING_DATE = "estimated_task_processing_date";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TASK_PROCESSING_DATE)
  private String estimatedTaskProcessingDate = "2022-05-05 11:00:00";

  public static final String SERIALIZED_NAME_ACTUAL_TASK_PROCESSING_DATE = "actual_task_processing_date";
  @SerializedName(SERIALIZED_NAME_ACTUAL_TASK_PROCESSING_DATE)
  private String actualTaskProcessingDate = "2022-05-05 11:00:00";

  /**
   * Выбор типа организации:  * &#x60;EXECUTIVE&#x60; - исполнительные органы  * &#x60;SUPERVISING&#x60; - контролирующие органы 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EXECUTIVE("EXECUTIVE"),
    
    SUPERVISING("SUPERVISING");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.EXECUTIVE;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<MediaContent> attachments = null;


  public ContractorTaskForm requestId(Long requestId) {
    
    this.requestId = requestId;
    return this;
  }

   /**
   * Get requestId
   * @return requestId
  **/
  @ApiModelProperty(example = "1", required = true, value = "")

  public Long getRequestId() {
    return requestId;
  }


  public void setRequestId(Long requestId) {
    this.requestId = requestId;
  }


  public ContractorTaskForm contractorId(Long contractorId) {
    
    this.contractorId = contractorId;
    return this;
  }

   /**
   * Get contractorId
   * @return contractorId
  **/
  @ApiModelProperty(example = "1", required = true, value = "")

  public Long getContractorId() {
    return contractorId;
  }


  public void setContractorId(Long contractorId) {
    this.contractorId = contractorId;
  }


  public ContractorTaskForm description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Пояснение исполнительного   контролирующего органа
   * @return description
  **/
  @ApiModelProperty(example = "Отловлены 100 собак", required = true, value = "Пояснение исполнительного   контролирующего органа")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ContractorTaskForm responsiblePerson(String responsiblePerson) {
    
    this.responsiblePerson = responsiblePerson;
    return this;
  }

   /**
   * Ответственное за работу лицо от органа исполнения  проверки
   * @return responsiblePerson
  **/
  @ApiModelProperty(example = "Петров В.В., старший лейтинант", required = true, value = "Ответственное за работу лицо от органа исполнения  проверки")

  public String getResponsiblePerson() {
    return responsiblePerson;
  }


  public void setResponsiblePerson(String responsiblePerson) {
    this.responsiblePerson = responsiblePerson;
  }


  public ContractorTaskForm contactPhone(String contactPhone) {
    
    this.contactPhone = contactPhone;
    return this;
  }

   /**
   * Номер телефона ответственного лица
   * @return contactPhone
  **/
  @ApiModelProperty(example = "0714000000", required = true, value = "Номер телефона ответственного лица")

  public String getContactPhone() {
    return contactPhone;
  }


  public void setContactPhone(String contactPhone) {
    this.contactPhone = contactPhone;
  }


  public ContractorTaskForm contactEmail(String contactEmail) {
    
    this.contactEmail = contactEmail;
    return this;
  }

   /**
   * Адрес эл. почты ответственного лица
   * @return contactEmail
  **/
  @ApiModelProperty(example = "test@test.com", required = true, value = "Адрес эл. почты ответственного лица")

  public String getContactEmail() {
    return contactEmail;
  }


  public void setContactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
  }


  public ContractorTaskForm estimatedTaskProcessingDate(String estimatedTaskProcessingDate) {
    
    this.estimatedTaskProcessingDate = estimatedTaskProcessingDate;
    return this;
  }

   /**
   * Предполагаемая дата проведения работ  контроля 
   * @return estimatedTaskProcessingDate
  **/
  @ApiModelProperty(required = true, value = "Предполагаемая дата проведения работ  контроля ")

  public String getEstimatedTaskProcessingDate() {
    return estimatedTaskProcessingDate;
  }


  public void setEstimatedTaskProcessingDate(String estimatedTaskProcessingDate) {
    this.estimatedTaskProcessingDate = estimatedTaskProcessingDate;
  }


  public ContractorTaskForm actualTaskProcessingDate(String actualTaskProcessingDate) {
    
    this.actualTaskProcessingDate = actualTaskProcessingDate;
    return this;
  }

   /**
   * Фактическая дата проведения работ  контроля 
   * @return actualTaskProcessingDate
  **/
  @ApiModelProperty(required = true, value = "Фактическая дата проведения работ  контроля ")

  public String getActualTaskProcessingDate() {
    return actualTaskProcessingDate;
  }


  public void setActualTaskProcessingDate(String actualTaskProcessingDate) {
    this.actualTaskProcessingDate = actualTaskProcessingDate;
  }


  public ContractorTaskForm type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Выбор типа организации:  * &#x60;EXECUTIVE&#x60; - исполнительные органы  * &#x60;SUPERVISING&#x60; - контролирующие органы 
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Выбор типа организации:  * `EXECUTIVE` - исполнительные органы  * `SUPERVISING` - контролирующие органы ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ContractorTaskForm attachments(List<MediaContent> attachments) {
    
    this.attachments = attachments;
    return this;
  }

  public ContractorTaskForm addAttachmentsItem(MediaContent attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<MediaContent>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MediaContent> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<MediaContent> attachments) {
    this.attachments = attachments;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractorTaskForm contractorTaskForm = (ContractorTaskForm) o;
    return Objects.equals(this.requestId, contractorTaskForm.requestId) &&
        Objects.equals(this.contractorId, contractorTaskForm.contractorId) &&
        Objects.equals(this.description, contractorTaskForm.description) &&
        Objects.equals(this.responsiblePerson, contractorTaskForm.responsiblePerson) &&
        Objects.equals(this.contactPhone, contractorTaskForm.contactPhone) &&
        Objects.equals(this.contactEmail, contractorTaskForm.contactEmail) &&
        Objects.equals(this.estimatedTaskProcessingDate, contractorTaskForm.estimatedTaskProcessingDate) &&
        Objects.equals(this.actualTaskProcessingDate, contractorTaskForm.actualTaskProcessingDate) &&
        Objects.equals(this.type, contractorTaskForm.type) &&
        Objects.equals(this.attachments, contractorTaskForm.attachments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, contractorId, description, responsiblePerson, contactPhone, contactEmail, estimatedTaskProcessingDate, actualTaskProcessingDate, type, attachments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractorTaskForm {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    contractorId: ").append(toIndentedString(contractorId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    responsiblePerson: ").append(toIndentedString(responsiblePerson)).append("\n");
    sb.append("    contactPhone: ").append(toIndentedString(contactPhone)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    estimatedTaskProcessingDate: ").append(toIndentedString(estimatedTaskProcessingDate)).append("\n");
    sb.append("    actualTaskProcessingDate: ").append(toIndentedString(actualTaskProcessingDate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

