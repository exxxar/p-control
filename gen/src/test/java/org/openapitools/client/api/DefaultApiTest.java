/*
 * API системы \"Народный контроль\"
 *  <h2>Приложение Народный контроль</h2> <p><strong>Основная цель</strong>: контроль за состоянием сфер жизнедеятельности города по отраслям:</p> <ul> <li>общественный транспорт (мин.транс)</li> <li>состояние дорог и прилегающий территорий (мин.транс)</li> <li>состояние благоустройства города (мин. хоз)</li> <li>аварийные участки города, прорывы водо- тепло- коммуникаций, обрывы электро коммуникаций  (жэк)</li> <li>постройки в аварийном состоянии (мин. Хоз)</li> <li>уборка территории и вывоз отходов (мин. Хоз)</li> <li>некачественные товары (потреб контроль)</li> <li>скопление животных (мин. Хоз)</li> <li>последствия стихийных бедствий  (мин. Хоз,  мчс)</li> <li>последствие военных действий (мчс, военные, мин. Транс)</li> <li>проявления вандализмам (в т.ч. размещение рекламы в неположенном месте)</li> <li>состояние фортификационных сооружений (мчс)</li> <li>состояние рабочего места (проф. Комиссии)</li> <li>регулярное скопление криминальных (или асоциальных) элементов общества или проявление аморального поведения в общественных местах (мин. Хоз)</li> <li>нарушение ПДД участниками дорожного движения (мвд)</li> <li>также могут быть заявки без категории</li> <li>инициативы граждан - полезные нововведения от граждан</li> <li>заявки на утерянные или найденные вещи</li> </ul> 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: exxxar@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Contractor;
import org.openapitools.client.model.ContractorForm;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineObject3;
import org.openapitools.client.model.InlineObject4;
import org.openapitools.client.model.InlineObject6;
import org.openapitools.client.model.InlineObject7;
import org.openapitools.client.model.InlineObject8;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.MediaContent;
import org.openapitools.client.model.PaginateObject;
import org.openapitools.client.model.ProblemCategory;
import org.openapitools.client.model.ProblemCategoryForm;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.ProfileForm;
import org.openapitools.client.model.Request;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.RoleForm;
import org.openapitools.client.model.StoredRequest;
import org.openapitools.client.model.StoredRequestForm;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserForm;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Удаляем исполнителя по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contractorsContractorIdDeleteTest() throws ApiException {
        Long contractorId = null;
        Contractor response = api.contractorsContractorIdDelete(contractorId);

        // TODO: test validations
    }
    
    /**
     * Находим исполнителя по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contractorsContractorIdGetTest() throws ApiException {
        Long contractorId = null;
        Contractor response = api.contractorsContractorIdGet(contractorId);

        // TODO: test validations
    }
    
    /**
     * Обновляем исполнителя по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contractorsContractorIdPutTest() throws ApiException {
        Long contractorId = null;
        ContractorForm contractorForm = null;
        Contractor response = api.contractorsContractorIdPut(contractorId, contractorForm);

        // TODO: test validations
    }
    
    /**
     * Список активных заявок по исполнительному органу
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contractorsContractorIdRequestsActiveGetTest() throws ApiException {
        Long contractorId = null;
        Long page = null;
        Long size = null;
        PaginateObject response = api.contractorsContractorIdRequestsActiveGet(contractorId, page, size);

        // TODO: test validations
    }
    
    /**
     * Список архивных заявок по исполнительному органу
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contractorsContractorIdRequestsArchiveGetTest() throws ApiException {
        Long contractorId = null;
        Long page = null;
        Long size = null;
        PaginateObject response = api.contractorsContractorIdRequestsArchiveGet(contractorId, page, size);

        // TODO: test validations
    }
    
    /**
     * Список профилей исполнительных органов
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contractorsGetTest() throws ApiException {
        Long page = null;
        Long size = null;
        PaginateObject response = api.contractorsGet(page, size);

        // TODO: test validations
    }
    
    /**
     * Создаем профиль исполнительного органа
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contractorsPostTest() throws ApiException {
        ContractorForm contractorForm = null;
        Contractor response = api.contractorsPost(contractorForm);

        // TODO: test validations
    }
    
    /**
     * Список категорий проблем
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void problemCategoriesGetTest() throws ApiException {
        Long page = null;
        Long size = null;
        PaginateObject response = api.problemCategoriesGet(page, size);

        // TODO: test validations
    }
    
    /**
     * Создаем новую категорию проблем
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void problemCategoriesPostTest() throws ApiException {
        ProblemCategoryForm problemCategoryForm = null;
        ProblemCategory response = api.problemCategoriesPost(problemCategoryForm);

        // TODO: test validations
    }
    
    /**
     * Список активных запросов в категории
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void problemCategoriesProblemCategoryIdActiveRequestsGetTest() throws ApiException {
        Long problemCategoryId = null;
        Long page = null;
        Long size = null;
        PaginateObject response = api.problemCategoriesProblemCategoryIdActiveRequestsGet(problemCategoryId, page, size);

        // TODO: test validations
    }
    
    /**
     * Список архивных запросов в категории
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void problemCategoriesProblemCategoryIdArchiveRequestsGetTest() throws ApiException {
        Long problemCategoryId = null;
        Long page = null;
        Long size = null;
        PaginateObject response = api.problemCategoriesProblemCategoryIdArchiveRequestsGet(problemCategoryId, page, size);

        // TODO: test validations
    }
    
    /**
     * Список выполненных запросов в категории
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void problemCategoriesProblemCategoryIdCompletedRequestsGetTest() throws ApiException {
        Long problemCategoryId = null;
        Long page = null;
        Long size = null;
        PaginateObject response = api.problemCategoriesProblemCategoryIdCompletedRequestsGet(problemCategoryId, page, size);

        // TODO: test validations
    }
    
    /**
     * Удаляем категорию по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void problemCategoriesProblemCategoryIdDeleteTest() throws ApiException {
        Long problemCategoryId = null;
        ProblemCategory response = api.problemCategoriesProblemCategoryIdDelete(problemCategoryId);

        // TODO: test validations
    }
    
    /**
     * Находим категорию по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void problemCategoriesProblemCategoryIdGetTest() throws ApiException {
        Long problemCategoryId = null;
        User response = api.problemCategoriesProblemCategoryIdGet(problemCategoryId);

        // TODO: test validations
    }
    
    /**
     * Обновляем категорию по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void problemCategoriesProblemCategoryIdPutTest() throws ApiException {
        Long problemCategoryId = null;
        ProblemCategoryForm problemCategoryForm = null;
        ProblemCategory response = api.problemCategoriesProblemCategoryIdPut(problemCategoryId, problemCategoryForm);

        // TODO: test validations
    }
    
    /**
     * Список профилей пользователя
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesGetTest() throws ApiException {
        Long page = null;
        Long size = null;
        PaginateObject response = api.profilesGet(page, size);

        // TODO: test validations
    }
    
    /**
     * Создаем профиль
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesPostTest() throws ApiException {
        ProfileForm profileForm = null;
        Profile response = api.profilesPost(profileForm);

        // TODO: test validations
    }
    
    /**
     * Удаляем пользователя по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesProfileIdDeleteTest() throws ApiException {
        Long profileId = null;
        Profile response = api.profilesProfileIdDelete(profileId);

        // TODO: test validations
    }
    
    /**
     * Находим профиль пользователя по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesProfileIdGetTest() throws ApiException {
        Long profileId = null;
        Profile response = api.profilesProfileIdGet(profileId);

        // TODO: test validations
    }
    
    /**
     * Обновляем профиль пользователя по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesProfileIdPutTest() throws ApiException {
        Long profileId = null;
        ProfileForm profileForm = null;
        Profile response = api.profilesProfileIdPut(profileId, profileForm);

        // TODO: test validations
    }
    
    /**
     * Список заявок
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestsGetTest() throws ApiException {
        Long page = null;
        Long size = null;
        PaginateObject response = api.requestsGet(page, size);

        // TODO: test validations
    }
    
    /**
     * Подбор заявок в радиусе
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestsInRangePostTest() throws ApiException {
        InlineObject7 inlineObject7 = null;
        List<Request> response = api.requestsInRangePost(inlineObject7);

        // TODO: test validations
    }
    
    /**
     * Создаем заявку
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestsPostTest() throws ApiException {
        String description = null;
        List<Integer> problemCategories = null;
        BigDecimal latitude = null;
        BigDecimal longitude = null;
        Long parentRequestId = null;
        String location = null;
        Integer baseRating = null;
        String status = null;
        List<MediaContent> attachments = null;
        String requestConsiderationAt = null;
        String beginRequestExecutionAt = null;
        String completeRequestExecutionAt = null;
        String requestStatusCheckedAt = null;
        Boolean isModerated = null;
        Long moderatorId = null;
        List<File> filenames = null;
        Request response = api.requestsPost(description, problemCategories, latitude, longitude, parentRequestId, location, baseRating, status, attachments, requestConsiderationAt, beginRequestExecutionAt, completeRequestExecutionAt, requestStatusCheckedAt, isModerated, moderatorId, filenames);

        // TODO: test validations
    }
    
    /**
     * модификация рейтинга заявки (+-)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestsRatingPostTest() throws ApiException {
        InlineObject8 inlineObject8 = null;
        List<Request> response = api.requestsRatingPost(inlineObject8);

        // TODO: test validations
    }
    
    /**
     * Удаляем заявку по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestsRequestIdDeleteTest() throws ApiException {
        Long requestId = null;
        Request response = api.requestsRequestIdDelete(requestId);

        // TODO: test validations
    }
    
    /**
     * Находим заявку по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestsRequestIdGetTest() throws ApiException {
        Long requestId = null;
        Request response = api.requestsRequestIdGet(requestId);

        // TODO: test validations
    }
    
    /**
     * формируем заявку в виде pdf
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestsRequestIdPdfGetTest() throws ApiException {
        Long requestId = null;
        File response = api.requestsRequestIdPdfGet(requestId);

        // TODO: test validations
    }
    
    /**
     * Обновляем заявку по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestsRequestIdPutTest() throws ApiException {
        Long requestId = null;
        String description = null;
        List<Integer> problemCategories = null;
        BigDecimal latitude = null;
        BigDecimal longitude = null;
        Long parentRequestId = null;
        String location = null;
        Integer baseRating = null;
        String status = null;
        List<MediaContent> attachments = null;
        String requestConsiderationAt = null;
        String beginRequestExecutionAt = null;
        String completeRequestExecutionAt = null;
        String requestStatusCheckedAt = null;
        Boolean isModerated = null;
        Long moderatorId = null;
        List<File> filenames = null;
        Request response = api.requestsRequestIdPut(requestId, description, problemCategories, latitude, longitude, parentRequestId, location, baseRating, status, attachments, requestConsiderationAt, beginRequestExecutionAt, completeRequestExecutionAt, requestStatusCheckedAt, isModerated, moderatorId, filenames);

        // TODO: test validations
    }
    
    /**
     * Список всех ролей
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rolesGetTest() throws ApiException {
        Long page = null;
        Long size = null;
        PaginateObject response = api.rolesGet(page, size);

        // TODO: test validations
    }
    
    /**
     * Создаем черновик заявки
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rolesPostTest() throws ApiException {
        RoleForm roleForm = null;
        Role response = api.rolesPost(roleForm);

        // TODO: test validations
    }
    
    /**
     * Удаляем черновик заявки по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rolesRoleIdDeleteTest() throws ApiException {
        Long roleId = null;
        Role response = api.rolesRoleIdDelete(roleId);

        // TODO: test validations
    }
    
    /**
     * Находим роль по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rolesRoleIdGetTest() throws ApiException {
        Long roleId = null;
        Role response = api.rolesRoleIdGet(roleId);

        // TODO: test validations
    }
    
    /**
     * Обновляем черновик заявки по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rolesRoleIdPutTest() throws ApiException {
        Long roleId = null;
        RoleForm roleForm = null;
        Role response = api.rolesRoleIdPut(roleId, roleForm);

        // TODO: test validations
    }
    
    /**
     * Получаем адрес по координатам
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesAddressPostTest() throws ApiException {
        InlineObject inlineObject = null;
        InlineResponse200 response = api.servicesAddressPost(inlineObject);

        // TODO: test validations
    }
    
    /**
     * Получаем координаты по адресу
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesCoordsPostTest() throws ApiException {
        InlineObject1 inlineObject1 = null;
        InlineObject response = api.servicesCoordsPost(inlineObject1);

        // TODO: test validations
    }
    
    /**
     * тепловая карта проблемных \\ решенных зон за период
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesHeatmapPostTest() throws ApiException {
        InlineObject4 inlineObject4 = null;
        InlineResponse2001 response = api.servicesHeatmapPost(inlineObject4);

        // TODO: test validations
    }
    
    /**
     * оповещение пользователей
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesMailingPostTest() throws ApiException {
        String title = null;
        String message = null;
        String level = null;
        String type = null;
        String sendAs = null;
        List<Integer> userIds = null;
        String category = null;
        List<File> filenames = null;
        api.servicesMailingPost(title, message, level, type, sendAs, userIds, category, filenames);

        // TODO: test validations
    }
    
    /**
     * экспортирование заявок в формате Excel-файла
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesRequestExportPostTest() throws ApiException {
        InlineObject6 inlineObject6 = null;
        File response = api.servicesRequestExportPost(inlineObject6);

        // TODO: test validations
    }
    
    /**
     * импортирование заявок в формате Excel-файла(ов)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesRequestImportPostTest() throws ApiException {
        List<File> filenames = null;
        api.servicesRequestImportPost(filenames);

        // TODO: test validations
    }
    
    /**
     * статистика по категориям за период
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesStatisticPostTest() throws ApiException {
        InlineObject3 inlineObject3 = null;
        InlineObject response = api.servicesStatisticPost(inlineObject3);

        // TODO: test validations
    }
    
    /**
     * Список черновиков заявок
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storedRequestsGetTest() throws ApiException {
        Long page = null;
        Long size = null;
        PaginateObject response = api.storedRequestsGet(page, size);

        // TODO: test validations
    }
    
    /**
     * Создаем черновик заявки
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storedRequestsPostTest() throws ApiException {
        StoredRequestForm storedRequestForm = null;
        StoredRequest response = api.storedRequestsPost(storedRequestForm);

        // TODO: test validations
    }
    
    /**
     * Удаляем черновик заявки по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storedRequestsStoredRequestIdDeleteTest() throws ApiException {
        Long storedRequestId = null;
        StoredRequest response = api.storedRequestsStoredRequestIdDelete(storedRequestId);

        // TODO: test validations
    }
    
    /**
     * Находим черновик заявки по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storedRequestsStoredRequestIdGetTest() throws ApiException {
        Long storedRequestId = null;
        StoredRequest response = api.storedRequestsStoredRequestIdGet(storedRequestId);

        // TODO: test validations
    }
    
    /**
     * Обновляем черновик заявки по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storedRequestsStoredRequestIdPutTest() throws ApiException {
        Long storedRequestId = null;
        StoredRequestForm storedRequestForm = null;
        StoredRequest response = api.storedRequestsStoredRequestIdPut(storedRequestId, storedRequestForm);

        // TODO: test validations
    }
    
    /**
     * Список пользователей
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        Long page = null;
        Long size = null;
        PaginateObject response = api.usersGet(page, size);

        // TODO: test validations
    }
    
    /**
     * возвращаем текущего пользователя
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersMeGetTest() throws ApiException {
        User response = api.usersMeGet();

        // TODO: test validations
    }
    
    /**
     * Создаем пользователя
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        UserForm userForm = null;
        User response = api.usersPost(userForm);

        // TODO: test validations
    }
    
    /**
     * Удаляем пользователя по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdDeleteTest() throws ApiException {
        Long userId = null;
        User response = api.usersUserIdDelete(userId);

        // TODO: test validations
    }
    
    /**
     * Находим пользователя по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdGetTest() throws ApiException {
        Long userId = null;
        User response = api.usersUserIdGet(userId);

        // TODO: test validations
    }
    
    /**
     * Находим профиль пользователя по идентификатору пользователя
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdProfileGetTest() throws ApiException {
        Long userId = null;
        Profile response = api.usersUserIdProfileGet(userId);

        // TODO: test validations
    }
    
    /**
     * Обновляем пользователя по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdPutTest() throws ApiException {
        Long userId = null;
        UserForm userForm = null;
        User response = api.usersUserIdPut(userId, userForm);

        // TODO: test validations
    }
    
}
